<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="wrapped_functions/print2_wrapped.java"><class><specifier>public</specifier> class <name>PrintFunction</name> <block>{
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>print</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>( <argument><expr><literal type="string">"Print for "</literal> <operator>+</operator> <name>prototype</name> <operator>+</operator> <literal type="string">"------------------"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cfg</name><operator>.</operator><name>visit</name></name><argument_list>( <argument><expr><operator>new</operator> <class><super><name>PrintVisitor</name></super><argument_list>()</argument_list> <block>{
            <decl_stmt><decl><type><name>Phi</name></type> <name>phi</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

            <function><type><specifier>public</specifier> <name>void</name></type> <name>visitBlock</name><parameter_list>( <parameter><decl><type><specifier>final</specifier> <name>Block</name></type> <name>block</name></decl></parameter> )</parameter_list> <block>{<block_content>
                <expr_stmt><expr><name>phi</name> <operator>=</operator> <call><name>exprPhiAtBlock</name><argument_list>( <argument><expr><name>block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>visitBlock</name></name><argument_list>( <argument><expr><name>block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
            <function><type><specifier>public</specifier> <name>void</name></type> <name>visitLabelStmt</name><parameter_list>( <parameter><decl><type><specifier>final</specifier> <name>LabelStmt</name></type> <name>stmt</name></decl></parameter> )</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>visitLabelStmt</name></name><argument_list>( <argument><expr><name>stmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>( <expr><call><name><name>stmt</name><operator>.</operator><name>label</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsBlock</name><argument_list>()</argument_list></call></expr> )</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>( <expr><name>phi</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>println</name><argument_list>( <argument><expr><name>phi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>phi</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>( <argument><expr><literal type="string">"End Print ----------------------------"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class></unit>
