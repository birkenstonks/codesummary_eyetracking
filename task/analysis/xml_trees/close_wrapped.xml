<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="wrapped_functions/close_wrapped.java"><class><specifier>public</specifier> class <name>MyClass</name> <block>{
  <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Tabpanel</name></type> <name>tempPanel</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>View</name></type> <name>tempView</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Enumeration</name><argument_list type="generic">&lt;<argument><name>Tabbox</name></argument>&gt;</argument_list></name></type> <name>tabs</name> <init>= <expr><call><name><name>primaryTabMap</name><operator>.</operator><name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name><name>tabs</name><operator>.</operator><name>hasMoreElements</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name><name>tabs</name><operator>.</operator><name>nextElement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTabpanels</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getChildren</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>itr</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><call><name><name>itr</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tempPanel</name> <operator>=</operator> <operator>(</operator><name>Tabpanel</name><operator>)</operator> <call><name><name>itr</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tempView</name> <operator>=</operator> <operator>(</operator><name>View</name><operator>)</operator> <call><name><name>tempPanel</name><operator>.</operator><name>getChildren</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tempView</name><operator>.</operator><name>deregisterView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></while>
  </block_content>}</block></function>
}</block></class></unit>
