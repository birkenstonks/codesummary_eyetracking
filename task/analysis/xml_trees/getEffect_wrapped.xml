<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/getEffect_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="19:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:31">StatusEffectParser</name> <block pos:start="1:33" pos:end="19:1">{
    <function pos:start="2:5" pos:end="18:5"><type pos:start="2:5" pos:end="2:23"><specifier pos:start="2:5" pos:end="2:10">public</specifier> <name pos:start="2:12" pos:end="2:23">StatusEffect</name></type> <name pos:start="2:25" pos:end="2:33">getEffect</name><parameter_list pos:start="2:34" pos:end="2:45">( <parameter pos:start="2:36" pos:end="2:43"><decl pos:start="2:36" pos:end="2:43"><type pos:start="2:36" pos:end="2:38"><name pos:start="2:36" pos:end="2:38">int</name></type> <name pos:start="2:40" pos:end="2:43">lock</name></decl></parameter> )</parameter_list> <block pos:start="2:47" pos:end="18:5">{<block_content pos:start="3:9" pos:end="17:20">
        <synchronized pos:start="3:9" pos:end="16:9">synchronized <init pos:start="3:22" pos:end="3:35">( <expr pos:start="3:24" pos:end="3:33"><name pos:start="3:24" pos:end="3:33">m_statuses</name></expr> )</init> <block pos:start="3:37" pos:end="16:9">{<block_content pos:start="4:13" pos:end="15:13">
            <decl_stmt pos:start="4:13" pos:end="4:47"><decl pos:start="4:13" pos:end="4:46"><type pos:start="4:13" pos:end="4:20"><name pos:start="4:13" pos:end="4:20">Iterator</name></type> <name pos:start="4:22" pos:end="4:22">i</name> <init pos:start="4:24" pos:end="4:46">= <expr pos:start="4:26" pos:end="4:46"><call pos:start="4:26" pos:end="4:46"><name pos:start="4:26" pos:end="4:44"><name pos:start="4:26" pos:end="4:35">m_statuses</name><operator pos:start="4:36" pos:end="4:36">.</operator><name pos:start="4:37" pos:end="4:44">iterator</name></name><argument_list pos:start="4:45" pos:end="4:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <while pos:start="6:13" pos:end="15:13">while <condition pos:start="6:19" pos:end="6:33">( <expr pos:start="6:21" pos:end="6:31"><call pos:start="6:21" pos:end="6:31"><name pos:start="6:21" pos:end="6:29"><name pos:start="6:21" pos:end="6:21">i</name><operator pos:start="6:22" pos:end="6:22">.</operator><name pos:start="6:23" pos:end="6:29">hasNext</name></name><argument_list pos:start="6:30" pos:end="6:31">()</argument_list></call></expr> )</condition> <block pos:start="6:35" pos:end="15:13">{<block_content pos:start="7:17" pos:end="14:17">
                <decl_stmt pos:start="7:17" pos:end="7:60"><decl pos:start="7:17" pos:end="7:59"><type pos:start="7:17" pos:end="7:28"><name pos:start="7:17" pos:end="7:28">StatusEffect</name></type> <name pos:start="7:30" pos:end="7:32">eff</name> <init pos:start="7:34" pos:end="7:59">= <expr pos:start="7:36" pos:end="7:59"><operator pos:start="7:36" pos:end="7:36">(</operator> <name pos:start="7:38" pos:end="7:49">StatusEffect</name> <operator pos:start="7:51" pos:end="7:51">)</operator><call pos:start="7:52" pos:end="7:59"><name pos:start="7:52" pos:end="7:57"><name pos:start="7:52" pos:end="7:52">i</name><operator pos:start="7:53" pos:end="7:53">.</operator><name pos:start="7:54" pos:end="7:57">next</name></name><argument_list pos:start="7:58" pos:end="7:59">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="9:17" pos:end="11:17"><if pos:start="9:17" pos:end="11:17">if <condition pos:start="9:20" pos:end="9:56">(<expr pos:start="9:21" pos:end="9:54"><operator pos:start="9:21" pos:end="9:21">(</operator> <name pos:start="9:23" pos:end="9:25">eff</name> <operator pos:start="9:27" pos:end="9:28">==</operator> <literal type="null" pos:start="9:30" pos:end="9:33">null</literal> <operator pos:start="9:35" pos:end="9:35">)</operator> <operator pos:start="9:37" pos:end="9:38">||</operator> <operator pos:start="9:40" pos:end="9:40">!</operator><call pos:start="9:41" pos:end="9:54"><name pos:start="9:41" pos:end="9:52"><name pos:start="9:41" pos:end="9:43">eff</name><operator pos:start="9:44" pos:end="9:44">.</operator><name pos:start="9:45" pos:end="9:52">isActive</name></name><argument_list pos:start="9:53" pos:end="9:54">()</argument_list></call></expr> )</condition> <block pos:start="9:58" pos:end="11:17">{<block_content pos:start="10:21" pos:end="10:29">
                    <continue pos:start="10:21" pos:end="10:29">continue;</continue>
                </block_content>}</block></if></if_stmt>
                <if_stmt pos:start="12:17" pos:end="14:17"><if pos:start="12:17" pos:end="14:17">if <condition pos:start="12:20" pos:end="12:44">( <expr pos:start="12:22" pos:end="12:42"><call pos:start="12:22" pos:end="12:34"><name pos:start="12:22" pos:end="12:32"><name pos:start="12:22" pos:end="12:24">eff</name><operator pos:start="12:25" pos:end="12:25">.</operator><name pos:start="12:26" pos:end="12:32">getLock</name></name><argument_list pos:start="12:33" pos:end="12:34">()</argument_list></call> <operator pos:start="12:36" pos:end="12:37">==</operator> <name pos:start="12:39" pos:end="12:42">lock</name></expr> )</condition> <block pos:start="12:46" pos:end="14:17">{<block_content pos:start="13:21" pos:end="13:31">
                    <return pos:start="13:21" pos:end="13:31">return <expr pos:start="13:28" pos:end="13:30"><name pos:start="13:28" pos:end="13:30">eff</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></synchronized>
        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><literal type="null" pos:start="17:16" pos:end="17:19">null</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
