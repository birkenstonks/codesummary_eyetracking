<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="wrapped_functions/testOneTwoThreeCreateCycle_wrapped.java"><class><specifier>public</specifier> class <name>MyClass</name> <block>{
   <function><type><specifier>public</specifier> <name>void</name></type> <name>testOneTwoThreeCreateCycle</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
      <decl_stmt><decl><type><name>IRodinFile</name></type> <name>ctx</name> <init>= <expr><call><name>createRodinFile</name><argument_list>(<argument><expr><literal type="string">"P/x.ctx"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>createDependency</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>createData</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"one"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ctx</name><operator>.</operator><name>save</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>runBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>IRodinFile</name></type> <name>cty</name> <init>= <expr><call><name>createRodinFile</name><argument_list>(<argument><expr><literal type="string">"P/y.ctx"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>createDependency</name><argument_list>(<argument><expr><name>cty</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>createData</name><argument_list>(<argument><expr><name>cty</name></expr></argument>, <argument><expr><literal type="string">"two"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cty</name><operator>.</operator><name>save</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>IRodinFile</name></type> <name>ctz</name> <init>= <expr><call><name>createRodinFile</name><argument_list>(<argument><expr><literal type="string">"P/z.ctx"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>createData</name><argument_list>(<argument><expr><name>ctz</name></expr></argument>, <argument><expr><literal type="string">"three"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ctz</name><operator>.</operator><name>save</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>runBuilder</name><argument_list>(<argument><expr><literal type="string">"CSC extract /P/x.ctx"</literal></expr></argument>, <argument><expr><literal type="string">"CSC run /P/x.csc"</literal></expr></argument>, <argument><expr><literal type="string">"CSC extract /P/y.ctx"</literal></expr></argument>,
            <argument><expr><literal type="string">"CSC extract /P/z.ctx"</literal></expr></argument>, <argument><expr><literal type="string">"CSC run /P/z.csc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   </block_content>}</block></function>
}</block></class></unit>
