<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/addErrors_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="9:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:25">ErrorManager</name> <block pos:start="1:27" pos:end="9:1">{
  
  <function pos:start="3:3" pos:end="7:3"><type pos:start="3:3" pos:end="3:13"><specifier pos:start="3:3" pos:end="3:8">public</specifier> <name pos:start="3:10" pos:end="3:13">void</name></type> <name pos:start="3:15" pos:end="3:23">addErrors</name><parameter_list pos:start="3:24" pos:end="3:64">( <parameter pos:start="3:26" pos:end="3:34"><decl pos:start="3:26" pos:end="3:34"><type pos:start="3:26" pos:end="3:34"><name pos:start="3:26" pos:end="3:31">String</name></type> <name pos:start="3:33" pos:end="3:34">el</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:62"><decl pos:start="3:37" pos:end="3:62"><type pos:start="3:37" pos:end="3:62"><name pos:start="3:37" pos:end="3:53">IErrorDescription</name><modifier pos:start="3:54" pos:end="3:56">...</modifier></type> <name pos:start="3:58" pos:end="3:62">error</name></decl></parameter> )</parameter_list> <block pos:start="3:66" pos:end="7:3">{<block_content pos:start="4:5" pos:end="6:63">
    <decl_stmt pos:start="4:5" pos:end="4:53"><decl pos:start="4:5" pos:end="4:52"><type pos:start="4:5" pos:end="4:29"><specifier pos:start="4:5" pos:end="4:9">final</specifier> <name pos:start="4:11" pos:end="4:29"><name pos:start="4:11" pos:end="4:27">IErrorDescription</name><index pos:start="4:28" pos:end="4:29">[]</index></name></type> <name pos:start="4:31" pos:end="4:33">msg</name> <init pos:start="4:35" pos:end="4:52">= <expr pos:start="4:37" pos:end="4:52"><call pos:start="4:37" pos:end="4:52"><name pos:start="4:37" pos:end="4:46"><name pos:start="4:37" pos:end="4:42">errors</name><operator pos:start="4:43" pos:end="4:43">.</operator><name pos:start="4:44" pos:end="4:46">get</name></name><argument_list pos:start="4:47" pos:end="4:52">( <argument pos:start="4:49" pos:end="4:50"><expr pos:start="4:49" pos:end="4:50"><name pos:start="4:49" pos:end="4:50">el</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:start="5:5" pos:end="5:82">// we expect that the main scenario is to add only once errors per property...</comment>
    <expr_stmt pos:start="6:5" pos:end="6:63"><expr pos:start="6:5" pos:end="6:62"><call pos:start="6:5" pos:end="6:62"><name pos:start="6:5" pos:end="6:14"><name pos:start="6:5" pos:end="6:10">errors</name><operator pos:start="6:11" pos:end="6:11">.</operator><name pos:start="6:12" pos:end="6:14">put</name></name><argument_list pos:start="6:15" pos:end="6:62">( <argument pos:start="6:17" pos:end="6:18"><expr pos:start="6:17" pos:end="6:18"><name pos:start="6:17" pos:end="6:18">el</name></expr></argument>, <argument pos:start="6:21" pos:end="6:61"><expr pos:start="6:21" pos:end="6:61"><ternary pos:start="6:21" pos:end="6:61"><condition pos:start="6:21" pos:end="6:33"><expr pos:start="6:21" pos:end="6:31"><name pos:start="6:21" pos:end="6:23">msg</name> <operator pos:start="6:25" pos:end="6:26">==</operator> <literal type="null" pos:start="6:28" pos:end="6:31">null</literal></expr> ?</condition><then pos:start="6:35" pos:end="6:39"> <expr pos:start="6:35" pos:end="6:39"><name pos:start="6:35" pos:end="6:39">error</name></expr> </then><else pos:start="6:41" pos:end="6:61">: <expr pos:start="6:43" pos:end="6:61"><call pos:start="6:43" pos:end="6:61"><name pos:start="6:43" pos:end="6:47">merge</name><argument_list pos:start="6:48" pos:end="6:61">( <argument pos:start="6:50" pos:end="6:52"><expr pos:start="6:50" pos:end="6:52"><name pos:start="6:50" pos:end="6:52">msg</name></expr></argument>, <argument pos:start="6:55" pos:end="6:59"><expr pos:start="6:55" pos:end="6:59"><name pos:start="6:55" pos:end="6:59">error</name></expr></argument> )</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
  
}</block></class></unit>
