<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/testGetCodigo_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="13:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:27">CronogramaTest</name> <block pos:start="1:29" pos:end="13:1">{
    <function pos:start="2:5" pos:end="12:5"><type pos:start="2:5" pos:end="2:15"><specifier pos:start="2:5" pos:end="2:10">public</specifier> <name pos:start="2:12" pos:end="2:15">void</name></type> <name pos:start="2:17" pos:end="2:29">testGetCodigo</name><parameter_list pos:start="2:30" pos:end="2:31">()</parameter_list> <block pos:start="2:33" pos:end="12:5">{<block_content pos:start="3:9" pos:end="11:48">
        <expr_stmt pos:start="3:9" pos:end="3:42"><expr pos:start="3:9" pos:end="3:41"><call pos:start="3:9" pos:end="3:41"><name pos:start="3:9" pos:end="3:26"><name pos:start="3:9" pos:end="3:14">System</name><operator pos:start="3:15" pos:end="3:15">.</operator><name pos:start="3:16" pos:end="3:18">out</name><operator pos:start="3:19" pos:end="3:19">.</operator><name pos:start="3:20" pos:end="3:26">println</name></name><argument_list pos:start="3:27" pos:end="3:41">( <argument pos:start="3:29" pos:end="3:39"><expr pos:start="3:29" pos:end="3:39"><literal type="string" pos:start="3:29" pos:end="3:39">"getCodigo"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            
        <decl_stmt pos:start="5:9" pos:end="5:35"><decl pos:start="5:9" pos:end="5:34"><type pos:start="5:9" pos:end="5:18"><name pos:start="5:9" pos:end="5:18">Cronograma</name></type> <name pos:start="5:20" pos:end="5:27">instance</name> <init pos:start="5:29" pos:end="5:34">= <expr pos:start="5:31" pos:end="5:34"><literal type="null" pos:start="5:31" pos:end="5:34">null</literal></expr></init></decl>;</decl_stmt>   
        <decl_stmt pos:start="6:9" pos:end="6:30"><decl pos:start="6:9" pos:end="6:29"><type pos:start="6:9" pos:end="6:14"><name pos:start="6:9" pos:end="6:14">String</name></type> <name pos:start="6:16" pos:end="6:24">expResult</name> <init pos:start="6:26" pos:end="6:29">= <expr pos:start="6:28" pos:end="6:29"><literal type="string" pos:start="6:28" pos:end="6:29">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="7:9" pos:end="7:45"><decl pos:start="7:9" pos:end="7:44"><type pos:start="7:9" pos:end="7:14"><name pos:start="7:9" pos:end="7:14">String</name></type> <name pos:start="7:16" pos:end="7:21">result</name> <init pos:start="7:23" pos:end="7:44">= <expr pos:start="7:25" pos:end="7:44"><call pos:start="7:25" pos:end="7:44"><name pos:start="7:25" pos:end="7:42"><name pos:start="7:25" pos:end="7:32">instance</name><operator pos:start="7:33" pos:end="7:33">.</operator><name pos:start="7:34" pos:end="7:42">getCodigo</name></name><argument_list pos:start="7:43" pos:end="7:44">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="8:9" pos:end="8:42"><expr pos:start="8:9" pos:end="8:41"><call pos:start="8:9" pos:end="8:41"><name pos:start="8:9" pos:end="8:20">assertEquals</name><argument_list pos:start="8:21" pos:end="8:41">( <argument pos:start="8:23" pos:end="8:31"><expr pos:start="8:23" pos:end="8:31"><name pos:start="8:23" pos:end="8:31">expResult</name></expr></argument>, <argument pos:start="8:34" pos:end="8:39"><expr pos:start="8:34" pos:end="8:39"><name pos:start="8:34" pos:end="8:39">result</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            
        <comment type="line" pos:start="10:9" pos:end="10:83">// TODO review the generated test code and remove the default call to fail.</comment>
        <expr_stmt pos:start="11:9" pos:end="11:48"><expr pos:start="11:9" pos:end="11:47"><call pos:start="11:9" pos:end="11:47"><name pos:start="11:9" pos:end="11:12">fail</name><argument_list pos:start="11:13" pos:end="11:47">( <argument pos:start="11:15" pos:end="11:45"><expr pos:start="11:15" pos:end="11:45"><literal type="string" pos:start="11:15" pos:end="11:45">"The test case is a prototype."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class></unit>
