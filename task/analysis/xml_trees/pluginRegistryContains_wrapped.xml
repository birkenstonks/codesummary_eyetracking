<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="wrapped_functions/pluginRegistryContains_wrapped.java"><class><specifier>public</specifier> class <name>PluginRegistry</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>PluginRegistryNode</name></argument>&gt;</argument_list></name></type> <name>registry</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PluginRegistry</name><parameter_list>()</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>registry</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>addNode</name><parameter_list>(<parameter><decl><type><name>PluginRegistryNode</name></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name>registry</name></expr>)</init> <block>{<block_content>
            <expr_stmt><expr><call><name><name>registry</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></synchronized>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>pluginRegistryContains</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pluginName</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <synchronized>synchronized <init>(<expr><name>registry</name></expr>)</init> <block>{<block_content>
            <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>PluginRegistryNode</name></argument>&gt;</argument_list></name></type> <name>iter</name></decl>;</decl_stmt>

            <for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <call><name><name>registry</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>PluginRegistryNode</name></type> <name>node</name> <init>= <expr><call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name><name>node</name><operator>.</operator><name>plugin</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>pluginName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></synchronized>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    </block_content>}</block></function>

}</block></class></unit>
