<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/pluginRegistryContains_wrapped.java" pos:tabs="8"><import pos:start="1:1" pos:end="1:26">import <name pos:start="1:8" pos:end="1:25"><name pos:start="1:8" pos:end="1:11">java</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:16">util</name><operator pos:start="1:17" pos:end="1:17">.</operator><name pos:start="1:18" pos:end="1:25">Iterator</name></name>;</import>

<class pos:start="3:1" pos:end="32:1"><specifier pos:start="3:1" pos:end="3:6">public</specifier> class <name pos:start="3:14" pos:end="3:20">MyClass</name> <block pos:start="3:22" pos:end="32:1">{
    <comment type="line" pos:start="4:5" pos:end="4:62">// Assuming registry is a collection of PluginRegistryNode</comment>
    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:32"><name pos:start="5:5" pos:end="5:32"><name pos:start="5:5" pos:end="5:12">Iterable</name><argument_list type="generic" pos:start="5:13" pos:end="5:32">&lt;<argument pos:start="5:14" pos:end="5:31"><name pos:start="5:14" pos:end="5:31">PluginRegistryNode</name></argument>&gt;</argument_list></name></type> <name pos:start="5:34" pos:end="5:41">registry</name></decl>;</decl_stmt>

    <function pos:start="7:5" pos:end="17:5"><type pos:start="7:5" pos:end="7:18"><specifier pos:start="7:5" pos:end="7:10">public</specifier> <name pos:start="7:12" pos:end="7:18">boolean</name></type> <name pos:start="7:20" pos:end="7:41">pluginRegistryContains</name><parameter_list pos:start="7:42" pos:end="7:60">(<parameter pos:start="7:43" pos:end="7:59"><decl pos:start="7:43" pos:end="7:59"><type pos:start="7:43" pos:end="7:48"><name pos:start="7:43" pos:end="7:48">String</name></type> <name pos:start="7:50" pos:end="7:59">pluginName</name></decl></parameter>)</parameter_list> <block pos:start="7:62" pos:end="17:5">{<block_content pos:start="8:9" pos:end="16:21">
        <synchronized pos:start="8:9" pos:end="15:9">synchronized <init pos:start="8:22" pos:end="8:31">(<expr pos:start="8:23" pos:end="8:30"><name pos:start="8:23" pos:end="8:30">registry</name></expr>)</init> <block pos:start="8:33" pos:end="15:9">{<block_content pos:start="9:13" pos:end="14:13">
            <decl_stmt pos:start="9:13" pos:end="9:26"><decl pos:start="9:13" pos:end="9:25"><type pos:start="9:13" pos:end="9:20"><name pos:start="9:13" pos:end="9:20">Iterator</name></type> <name pos:start="9:22" pos:end="9:25">iter</name></decl>;</decl_stmt>

            <for pos:start="11:13" pos:end="14:13">for <control pos:start="11:17" pos:end="11:62">(<init pos:start="11:18" pos:end="11:44"><expr pos:start="11:18" pos:end="11:43"><name pos:start="11:18" pos:end="11:21">iter</name> <operator pos:start="11:23" pos:end="11:23">=</operator> <call pos:start="11:25" pos:end="11:43"><name pos:start="11:25" pos:end="11:41"><name pos:start="11:25" pos:end="11:32">registry</name><operator pos:start="11:33" pos:end="11:33">.</operator><name pos:start="11:34" pos:end="11:41">iterator</name></name><argument_list pos:start="11:42" pos:end="11:43">()</argument_list></call></expr>;</init> <condition pos:start="11:46" pos:end="11:60"><expr pos:start="11:46" pos:end="11:59"><call pos:start="11:46" pos:end="11:59"><name pos:start="11:46" pos:end="11:57"><name pos:start="11:46" pos:end="11:49">iter</name><operator pos:start="11:50" pos:end="11:50">.</operator><name pos:start="11:51" pos:end="11:57">hasNext</name></name><argument_list pos:start="11:58" pos:end="11:59">()</argument_list></call></expr>;</condition> <incr/>)</control> <block pos:start="11:64" pos:end="14:13">{<block_content pos:start="12:17" pos:end="13:74">
                <decl_stmt pos:start="12:17" pos:end="12:75"><decl pos:start="12:17" pos:end="12:74"><type pos:start="12:17" pos:end="12:34"><name pos:start="12:17" pos:end="12:34">PluginRegistryNode</name></type> <name pos:start="12:36" pos:end="12:39">node</name> <init pos:start="12:41" pos:end="12:74">= <expr pos:start="12:43" pos:end="12:74"><operator pos:start="12:43" pos:end="12:43">(</operator><name pos:start="12:44" pos:end="12:61">PluginRegistryNode</name><operator pos:start="12:62" pos:end="12:62">)</operator> <call pos:start="12:64" pos:end="12:74"><name pos:start="12:64" pos:end="12:72"><name pos:start="12:64" pos:end="12:67">iter</name><operator pos:start="12:68" pos:end="12:68">.</operator><name pos:start="12:69" pos:end="12:72">next</name></name><argument_list pos:start="12:73" pos:end="12:74">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt pos:start="13:17" pos:end="13:74"><if pos:start="13:17" pos:end="13:74">if <condition pos:start="13:20" pos:end="13:61">(<expr pos:start="13:21" pos:end="13:60"><call pos:start="13:21" pos:end="13:41"><name pos:start="13:21" pos:end="13:39"><name pos:start="13:21" pos:end="13:24">node</name><operator pos:start="13:25" pos:end="13:25">.</operator><name pos:start="13:26" pos:end="13:31">plugin</name><operator pos:start="13:32" pos:end="13:32">.</operator><name pos:start="13:33" pos:end="13:39">getName</name></name><argument_list pos:start="13:40" pos:end="13:41">()</argument_list></call><operator pos:start="13:42" pos:end="13:42">.</operator><call pos:start="13:43" pos:end="13:60"><name pos:start="13:43" pos:end="13:48">equals</name><argument_list pos:start="13:49" pos:end="13:60">(<argument pos:start="13:50" pos:end="13:59"><expr pos:start="13:50" pos:end="13:59"><name pos:start="13:50" pos:end="13:59">pluginName</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="13:63" pos:end="13:74"><block_content pos:start="13:63" pos:end="13:74"> <return pos:start="13:63" pos:end="13:74">return <expr pos:start="13:70" pos:end="13:73"><literal type="boolean" pos:start="13:70" pos:end="13:73">true</literal></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></synchronized>
        <return pos:start="16:9" pos:end="16:21">return <expr pos:start="16:16" pos:end="16:20"><literal type="boolean" pos:start="16:16" pos:end="16:20">false</literal></expr>;</return>
    </block_content>}</block></function>

    <comment type="line" pos:start="19:5" pos:end="19:86">// Placeholder class definitions, replace these with your actual class definitions</comment>
    <class pos:start="20:5" pos:end="23:5">class <name pos:start="20:11" pos:end="20:28">PluginRegistryNode</name> <block pos:start="20:30" pos:end="23:5">{
        <comment type="line" pos:start="21:9" pos:end="21:65">// Your PluginRegistryNode class implementation goes here</comment>
        <decl_stmt pos:start="22:9" pos:end="22:22"><decl pos:start="22:9" pos:end="22:21"><type pos:start="22:9" pos:end="22:14"><name pos:start="22:9" pos:end="22:14">Plugin</name></type> <name pos:start="22:16" pos:end="22:21">plugin</name></decl>;</decl_stmt>
    }</block></class>

    <class pos:start="25:5" pos:end="31:5">class <name pos:start="25:11" pos:end="25:16">Plugin</name> <block pos:start="25:18" pos:end="31:5">{
        <comment type="line" pos:start="26:9" pos:end="26:53">// Your Plugin class implementation goes here</comment>
        <function pos:start="27:9" pos:end="30:9"><type pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:14">String</name></type> <name pos:start="27:16" pos:end="27:22">getName</name><parameter_list pos:start="27:23" pos:end="27:24">()</parameter_list> <block pos:start="27:26" pos:end="30:9">{<block_content pos:start="29:13" pos:end="29:22">
            <comment type="line" pos:start="28:13" pos:end="28:59">// Replace this with your actual implementation</comment>
            <return pos:start="29:13" pos:end="29:22">return <expr pos:start="29:20" pos:end="29:21"><literal type="string" pos:start="29:20" pos:end="29:21">""</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class></unit>
