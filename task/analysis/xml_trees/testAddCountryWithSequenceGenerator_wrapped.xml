<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/testAddCountryWithSequenceGenerator_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="12:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:24">CountryTest</name> <block pos:start="1:26" pos:end="12:1">{
    
    <function pos:start="3:5" pos:end="11:5"><type pos:start="3:5" pos:end="3:15"><specifier pos:start="3:5" pos:end="3:10">public</specifier> <name pos:start="3:12" pos:end="3:15">void</name></type> <name pos:start="3:17" pos:end="3:51">testAddCountryWithSequenceGenerator</name><parameter_list pos:start="3:52" pos:end="3:53">()</parameter_list> <throws pos:start="3:55" pos:end="3:70">throws <argument pos:start="3:62" pos:end="3:70"><expr pos:start="3:62" pos:end="3:70"><name pos:start="3:62" pos:end="3:70">Exception</name></expr></argument></throws> <block pos:start="3:72" pos:end="11:5">{<block_content pos:start="4:9" pos:end="10:91">
        <decl_stmt pos:start="4:9" pos:end="4:65"><decl pos:start="4:9" pos:end="4:64"><type pos:start="4:9" pos:end="4:27"><name pos:start="4:9" pos:end="4:27">CountryWithSequence</name></type> <name pos:start="4:29" pos:end="4:36">country1</name> <init pos:start="4:38" pos:end="4:64">= <expr pos:start="4:40" pos:end="4:64"><operator pos:start="4:40" pos:end="4:42">new</operator> <call pos:start="4:44" pos:end="4:64"><name pos:start="4:44" pos:end="4:62">CountryWithSequence</name><argument_list pos:start="4:63" pos:end="4:64">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="5:9" pos:end="5:38"><expr pos:start="5:9" pos:end="5:37"><call pos:start="5:9" pos:end="5:37"><name pos:start="5:9" pos:end="5:29"><name pos:start="5:9" pos:end="5:16">country1</name><operator pos:start="5:17" pos:end="5:17">.</operator><name pos:start="5:18" pos:end="5:29">setCountryId</name></name><argument_list pos:start="5:30" pos:end="5:37">( <argument pos:start="5:32" pos:end="5:35"><expr pos:start="5:32" pos:end="5:35"><literal type="string" pos:start="5:32" pos:end="5:35">"KR"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="6:9" pos:end="6:43"><expr pos:start="6:9" pos:end="6:42"><call pos:start="6:9" pos:end="6:42"><name pos:start="6:9" pos:end="6:31"><name pos:start="6:9" pos:end="6:16">country1</name><operator pos:start="6:17" pos:end="6:17">.</operator><name pos:start="6:18" pos:end="6:31">setCountryName</name></name><argument_list pos:start="6:32" pos:end="6:42">( <argument pos:start="6:34" pos:end="6:40"><expr pos:start="6:34" pos:end="6:40"><literal type="string" pos:start="6:34" pos:end="6:40">"Korea"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <decl_stmt pos:start="8:9" pos:end="8:67"><decl pos:start="8:9" pos:end="8:66"><type pos:start="8:9" pos:end="8:15"><name pos:start="8:9" pos:end="8:15">Integer</name></type> <name pos:start="8:17" pos:end="8:27">countryCode</name> <init pos:start="8:29" pos:end="8:66">= <expr pos:start="8:31" pos:end="8:66"><operator pos:start="8:31" pos:end="8:31">(</operator> <name pos:start="8:33" pos:end="8:39">Integer</name> <operator pos:start="8:41" pos:end="8:41">)</operator> <call pos:start="8:43" pos:end="8:66"><name pos:start="8:43" pos:end="8:54"><name pos:start="8:43" pos:end="8:49">session</name><operator pos:start="8:50" pos:end="8:50">.</operator><name pos:start="8:51" pos:end="8:54">save</name></name><argument_list pos:start="8:55" pos:end="8:66">( <argument pos:start="8:57" pos:end="8:64"><expr pos:start="8:57" pos:end="8:64"><name pos:start="8:57" pos:end="8:64">country1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="9:9" pos:end="9:89"><expr pos:start="9:9" pos:end="9:88"><call pos:start="9:9" pos:end="9:88"><name pos:start="9:9" pos:end="9:20">assertEquals</name><argument_list pos:start="9:21" pos:end="9:88">( <argument pos:start="9:23" pos:end="9:59"><expr pos:start="9:23" pos:end="9:59"><literal type="string" pos:start="9:23" pos:end="9:59">"fail to generate a new countryCode."</literal></expr></argument>, <argument pos:start="9:62" pos:end="9:62"><expr pos:start="9:62" pos:end="9:62"><literal type="number" pos:start="9:62" pos:end="9:62">0</literal></expr></argument>, <argument pos:start="9:65" pos:end="9:86"><expr pos:start="9:65" pos:end="9:86"><call pos:start="9:65" pos:end="9:86"><name pos:start="9:65" pos:end="9:84"><name pos:start="9:65" pos:end="9:75">countryCode</name><operator pos:start="9:76" pos:end="9:76">.</operator><name pos:start="9:77" pos:end="9:84">intValue</name></name><argument_list pos:start="9:85" pos:end="9:86">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="10:9" pos:end="10:91"><expr pos:start="10:9" pos:end="10:90"><call pos:start="10:9" pos:end="10:90"><name pos:start="10:9" pos:end="10:21">assertNotNull</name><argument_list pos:start="10:22" pos:end="10:90">( <argument pos:start="10:24" pos:end="10:75"><expr pos:start="10:24" pos:end="10:75"><literal type="string" pos:start="10:24" pos:end="10:75">"fail to add a new country with sequence generator."</literal></expr></argument>, <argument pos:start="10:78" pos:end="10:88"><expr pos:start="10:78" pos:end="10:88"><name pos:start="10:78" pos:end="10:88">countryCode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class></unit>
