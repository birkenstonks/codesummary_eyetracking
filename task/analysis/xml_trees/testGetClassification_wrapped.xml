<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/testGetClassification_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="15:1">class <name pos:start="1:7" pos:end="1:15">ClassName</name> <block pos:start="1:17" pos:end="15:1">{
  
  <function pos:start="3:3" pos:end="13:3"><type pos:start="3:3" pos:end="3:13"><specifier pos:start="3:3" pos:end="3:8">public</specifier> <name pos:start="3:10" pos:end="3:13">void</name></type> <name pos:start="3:15" pos:end="3:35">testGetClassification</name><parameter_list pos:start="3:36" pos:end="3:37">()</parameter_list> <block pos:start="3:39" pos:end="13:3">{<block_content pos:start="4:5" pos:end="12:44">
    <expr_stmt pos:start="4:5" pos:end="4:46"><expr pos:start="4:5" pos:end="4:45"><call pos:start="4:5" pos:end="4:45"><name pos:start="4:5" pos:end="4:22"><name pos:start="4:5" pos:end="4:10">System</name><operator pos:start="4:11" pos:end="4:11">.</operator><name pos:start="4:12" pos:end="4:14">out</name><operator pos:start="4:15" pos:end="4:15">.</operator><name pos:start="4:16" pos:end="4:22">println</name></name><argument_list pos:start="4:23" pos:end="4:45">( <argument pos:start="4:25" pos:end="4:43"><expr pos:start="4:25" pos:end="4:43"><literal type="string" pos:start="4:25" pos:end="4:43">"getClassification"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:61"><decl pos:start="5:5" pos:end="5:60"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:23">SystemClient_DBImpl</name></type> <name pos:start="5:25" pos:end="5:32">instance</name> <init pos:start="5:34" pos:end="5:60">= <expr pos:start="5:36" pos:end="5:60"><operator pos:start="5:36" pos:end="5:38">new</operator> <call pos:start="5:40" pos:end="5:60"><name pos:start="5:40" pos:end="5:58">SystemClient_DBImpl</name><argument_list pos:start="5:59" pos:end="5:60">()</argument_list></call></expr></init></decl>;</decl_stmt>
        
    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">Set</name></type> <name pos:start="7:9" pos:end="7:17">expResult</name> <init pos:start="7:19" pos:end="7:24">= <expr pos:start="7:21" pos:end="7:24"><literal type="null" pos:start="7:21" pos:end="7:24">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:46"><decl pos:start="8:5" pos:end="8:45"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">Set</name></type> <name pos:start="8:9" pos:end="8:14">result</name> <init pos:start="8:16" pos:end="8:45">= <expr pos:start="8:18" pos:end="8:45"><call pos:start="8:18" pos:end="8:45"><name pos:start="8:18" pos:end="8:43"><name pos:start="8:18" pos:end="8:25">instance</name><operator pos:start="8:26" pos:end="8:26">.</operator><name pos:start="8:27" pos:end="8:43">getClassification</name></name><argument_list pos:start="8:44" pos:end="8:45">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:38"><expr pos:start="9:5" pos:end="9:37"><call pos:start="9:5" pos:end="9:37"><name pos:start="9:5" pos:end="9:16">assertEquals</name><argument_list pos:start="9:17" pos:end="9:37">( <argument pos:start="9:19" pos:end="9:27"><expr pos:start="9:19" pos:end="9:27"><name pos:start="9:19" pos:end="9:27">expResult</name></expr></argument>, <argument pos:start="9:30" pos:end="9:35"><expr pos:start="9:30" pos:end="9:35"><name pos:start="9:30" pos:end="9:35">result</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        
    <comment type="line" pos:start="11:5" pos:end="11:79">// TODO review the generated test code and remove the default call to fail.</comment>
    <expr_stmt pos:start="12:5" pos:end="12:44"><expr pos:start="12:5" pos:end="12:43"><call pos:start="12:5" pos:end="12:43"><name pos:start="12:5" pos:end="12:8">fail</name><argument_list pos:start="12:9" pos:end="12:43">( <argument pos:start="12:11" pos:end="12:41"><expr pos:start="12:11" pos:end="12:41"><literal type="string" pos:start="12:11" pos:end="12:41">"The test case is a prototype."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function> 
  
}</block></class></unit>
