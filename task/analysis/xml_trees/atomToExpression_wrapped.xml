<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/atomToExpression_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="23:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:35">AtomToExpressionParser</name> <block pos:start="1:37" pos:end="23:1">{
    <function pos:start="2:5" pos:end="22:5"><type pos:start="2:5" pos:end="2:25"><specifier pos:start="2:5" pos:end="2:11">private</specifier> <specifier pos:start="2:13" pos:end="2:18">static</specifier> <name pos:start="2:20" pos:end="2:25">String</name></type> <name pos:start="2:27" pos:end="2:42">atomToExpression</name><parameter_list pos:start="2:43" pos:end="2:68">( <parameter pos:start="2:45" pos:end="2:53"><decl pos:start="2:45" pos:end="2:53"><type pos:start="2:45" pos:end="2:53"><name pos:start="2:45" pos:end="2:48">Atom</name></type> <name pos:start="2:50" pos:end="2:53">atom</name></decl></parameter>, <parameter pos:start="2:56" pos:end="2:66"><decl pos:start="2:56" pos:end="2:66"><type pos:start="2:56" pos:end="2:66"><name pos:start="2:56" pos:end="2:61">String</name></type> <name pos:start="2:63" pos:end="2:66">name</name></decl></parameter> )</parameter_list> <block pos:start="2:70" pos:end="22:5">{<block_content pos:start="3:9" pos:end="21:20">
        <decl_stmt pos:start="3:9" pos:end="3:35"><decl pos:start="3:9" pos:end="3:34"><type pos:start="3:9" pos:end="3:14"><name pos:start="3:9" pos:end="3:14">String</name></type> <name pos:start="3:16" pos:end="3:19">expr</name> <init pos:start="3:21" pos:end="3:34">= <expr pos:start="3:23" pos:end="3:34"><name pos:start="3:23" pos:end="3:26">name</name> <operator pos:start="3:28" pos:end="3:28">+</operator> <literal type="string" pos:start="3:30" pos:end="3:34">" = "</literal></expr></init></decl>;</decl_stmt>
		
        <if_stmt pos:start="5:9" pos:end="19:36"><if pos:start="5:9" pos:end="15:9">if <condition pos:start="5:12" pos:end="5:42">( <expr pos:start="5:14" pos:end="5:40"><name pos:start="5:14" pos:end="5:17">atom</name> <operator pos:start="5:19" pos:end="5:28">instanceof</operator> <name pos:start="5:30" pos:end="5:40">BooleanAtom</name></expr> )</condition> <block pos:start="5:44" pos:end="15:9">{<block_content pos:start="6:13" pos:end="14:13">
            <decl_stmt pos:start="6:13" pos:end="6:59"><decl pos:start="6:13" pos:end="6:58"><type pos:start="6:13" pos:end="6:23"><name pos:start="6:13" pos:end="6:23">BooleanAtom</name></type> <name pos:start="6:25" pos:end="6:35">booleanAtom</name> <init pos:start="6:37" pos:end="6:58">= <expr pos:start="6:39" pos:end="6:58"><operator pos:start="6:39" pos:end="6:39">(</operator> <name pos:start="6:41" pos:end="6:51">BooleanAtom</name> <operator pos:start="6:53" pos:end="6:53">)</operator> <name pos:start="6:55" pos:end="6:58">atom</name></expr></init></decl>;</decl_stmt>
            <try pos:start="7:13" pos:end="14:13">try <block pos:start="7:17" pos:end="12:13">{<block_content pos:start="8:17" pos:end="11:34">
                <if_stmt pos:start="8:17" pos:end="11:34"><if pos:start="8:17" pos:end="9:34">if<condition pos:start="8:19" pos:end="8:51">( <expr pos:start="8:21" pos:end="8:49"><call pos:start="8:21" pos:end="8:49"><name pos:start="8:21" pos:end="8:47"><name pos:start="8:21" pos:end="8:31">booleanAtom</name><operator pos:start="8:32" pos:end="8:32">.</operator><name pos:start="8:33" pos:end="8:47">getBooleanValue</name></name><argument_list pos:start="8:48" pos:end="8:49">()</argument_list></call></expr> )</condition><block type="pseudo" pos:start="9:21" pos:end="9:34"><block_content pos:start="9:21" pos:end="9:34">
                    <expr_stmt pos:start="9:21" pos:end="9:34"><expr pos:start="9:21" pos:end="9:33"><name pos:start="9:21" pos:end="9:24">expr</name> <operator pos:start="9:26" pos:end="9:27">+=</operator> <literal type="string" pos:start="9:29" pos:end="9:33">"'T'"</literal></expr>;</expr_stmt></block_content></block></if>
                <else pos:start="10:17" pos:end="11:34">else<block type="pseudo" pos:start="11:21" pos:end="11:34"><block_content pos:start="11:21" pos:end="11:34">
                    <expr_stmt pos:start="11:21" pos:end="11:34"><expr pos:start="11:21" pos:end="11:33"><name pos:start="11:21" pos:end="11:24">expr</name> <operator pos:start="11:26" pos:end="11:27">+=</operator> <literal type="string" pos:start="11:29" pos:end="11:33">"'F'"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block> <catch pos:start="12:15" pos:end="14:13">catch <parameter_list pos:start="12:21" pos:end="12:47">( <parameter pos:start="12:23" pos:end="12:45"><decl pos:start="12:23" pos:end="12:45"><type pos:start="12:23" pos:end="12:45"><name pos:start="12:23" pos:end="12:43">InvalidStateException</name></type> <name pos:start="12:45" pos:end="12:45">e</name></decl></parameter> )</parameter_list> <block pos:start="12:49" pos:end="14:13">{<block_content pos:start="13:17" pos:end="13:68">
                <throw pos:start="13:17" pos:end="13:68">throw <expr pos:start="13:23" pos:end="13:67"><operator pos:start="13:23" pos:end="13:25">new</operator> <call pos:start="13:27" pos:end="13:67"><name pos:start="13:27" pos:end="13:31">Error</name><argument_list pos:start="13:32" pos:end="13:67">( <argument pos:start="13:34" pos:end="13:65"><expr pos:start="13:34" pos:end="13:65"><literal type="string" pos:start="13:34" pos:end="13:65">"Thing in invalid boolean state"</literal></expr></argument> )</argument_list></call></expr>;</throw>
            </block_content>}</block></catch></try>
        </block_content>}</block></if>		
        <if type="elseif" pos:start="16:9" pos:end="17:48">else if <condition pos:start="16:17" pos:end="16:44">( <expr pos:start="16:19" pos:end="16:42"><name pos:start="16:19" pos:end="16:22">atom</name> <operator pos:start="16:24" pos:end="16:33">instanceof</operator> <name pos:start="16:35" pos:end="16:42">TextAtom</name></expr> )</condition><block type="pseudo" pos:start="17:13" pos:end="17:48"><block_content pos:start="17:13" pos:end="17:48">
            <expr_stmt pos:start="17:13" pos:end="17:48"><expr pos:start="17:13" pos:end="17:47"><name pos:start="17:13" pos:end="17:16">expr</name> <operator pos:start="17:18" pos:end="17:19">+=</operator> <literal type="string" pos:start="17:21" pos:end="17:23">"'"</literal> <operator pos:start="17:25" pos:end="17:25">+</operator> <call pos:start="17:27" pos:end="17:41"><name pos:start="17:27" pos:end="17:39"><name pos:start="17:27" pos:end="17:30">atom</name><operator pos:start="17:31" pos:end="17:31">.</operator><name pos:start="17:32" pos:end="17:39">getValue</name></name><argument_list pos:start="17:40" pos:end="17:41">()</argument_list></call> <operator pos:start="17:43" pos:end="17:43">+</operator> <literal type="string" pos:start="17:45" pos:end="17:47">"'"</literal></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="18:9" pos:end="19:36">else<block type="pseudo" pos:start="19:13" pos:end="19:36"><block_content pos:start="19:13" pos:end="19:36">
            <expr_stmt pos:start="19:13" pos:end="19:36"><expr pos:start="19:13" pos:end="19:35"><name pos:start="19:13" pos:end="19:16">expr</name> <operator pos:start="19:18" pos:end="19:19">+=</operator> <call pos:start="19:21" pos:end="19:35"><name pos:start="19:21" pos:end="19:33"><name pos:start="19:21" pos:end="19:24">atom</name><operator pos:start="19:25" pos:end="19:25">.</operator><name pos:start="19:26" pos:end="19:33">getValue</name></name><argument_list pos:start="19:34" pos:end="19:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <return pos:start="21:9" pos:end="21:20">return <expr pos:start="21:16" pos:end="21:19"><name pos:start="21:16" pos:end="21:19">expr</name></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
