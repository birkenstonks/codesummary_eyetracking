<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="wrapped_functions/fScore_wrapped.java"><class><specifier>public</specifier> class <name>FScoreCalculator</name> <block>{
    <function><type><specifier>public</specifier> <name>double</name></type> <name>fScore</name><parameter_list>(<parameter><decl><type><name>ONDEXConcept</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ONDEXConcept</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>recall</name> <init>= <expr><call><name>recall</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>precision</name> <init>= <expr><call><name>precision</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>recall</name> <operator>+</operator> <name>precision</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>score</name> <operator>=</operator> <operator>(</operator><literal type="number">2d</literal> <operator>*</operator> <name>recall</name> <operator>*</operator> <name>precision</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>recall</name> <operator>+</operator> <name>precision</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>score</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>double</name></type> <name>recall</name><parameter_list>(<parameter><decl><type><name>ONDEXConcept</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ONDEXConcept</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// implementation of recall calculation</comment>
        <return>return <expr><literal type="number">0.0</literal></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>private</specifier> <name>double</name></type> <name>precision</name><parameter_list>(<parameter><decl><type><name>ONDEXConcept</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ONDEXConcept</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// implementation of precision calculation</comment>
        <return>return <expr><literal type="number">0.0</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
