<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="wrapped_functions/getGlobalElements_wrapped.java"><class><specifier>public</specifier> class <name>GlobalElementParser</name> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <name>GlobalDefMap</name></type> <name>globalDefMap</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>GlobalElementParser</name><parameter_list>(<parameter><decl><type><name>GlobalDefMap</name></type> <name>globalDefMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>globalDefMap</name></name> <operator>=</operator> <name>globalDefMap</name></expr>;</expr_stmt>
    </block_content>}</block></constructor>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>getGlobalElements</name><parameter_list>(<parameter><decl><type><name>Document</name></type> <name>doc</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>doc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition> <block>{<block_content>
            <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>list</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>selectNodes</name></name><argument_list>(<argument><expr><literal type="string">"/xsd:schema/xsd:element"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Iterator</name></type> <name>iter</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>iter</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Element</name></type> <name>element</name> <init>= <expr><operator>(</operator><name>Element</name><operator>)</operator> <call><name><name>iter</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>element</name><operator>.</operator><name>attributeValue</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GlobalElement</name></type> <name>g</name> <init>= <expr><operator>new</operator> <call><name>GlobalElement</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// System.out.println ( g.toString() );</comment>
            <try>try <block>{<block_content>
                <expr_stmt><expr><call><name><name>globalDefMap</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></for>
    </block_content>}</block></function>
}</block></class></unit>
