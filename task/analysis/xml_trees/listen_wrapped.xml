<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="wrapped_functions/listen_wrapped.java"><class><specifier>public</specifier> class <name>SocketServer</name> <block>{
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>listen</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{<block_content>
        <expr_stmt><expr><call><name>logMessage</name><argument_list>( <argument><expr><literal type="string">"Server started at "</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getHostname</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getPort</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>( <expr><literal type="boolean">true</literal></expr> )</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>Socket</name></type> <name>socket</name> <init>= <expr><call><name><name>serverSocket</name><operator>.</operator><name>accept</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>logMessage</name><argument_list>( <argument><expr><call><name><name>socket</name><operator>.</operator><name>getInetAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCanonicalHostName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"has made a connection !"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>logMessage</name><argument_list>( <argument><expr><literal type="string">"Creating new listener"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ListenThread</name></type> <name>task</name> <init>= <expr><operator>new</operator> <call><name>ListenThread</name><argument_list>( <argument><expr><name>socket</name></expr></argument>, <argument><expr><name>this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>logMessage</name><argument_list>( <argument><expr><literal type="string">"Adding new totemcontrolcomhandler"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addHandlers</name><argument_list>( <argument><expr><name>task</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Thread</name></type> <name>listener</name> <init>= <expr><operator>new</operator> <call><name>Thread</name><argument_list>( <argument><expr><name>task</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>logMessage</name><argument_list>( <argument><expr><literal type="string">"Starting new thread"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>logMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// implementation</comment>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getHostname</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// implementation</comment>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPort</name><parameter_list>()</parameter_list> <block>{<block_content>
        <comment type="line">// implementation</comment>
    </block_content>}</block></function>
    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addHandlers</name><parameter_list>(<parameter><decl><type><name>ListenThread</name></type> <name>task</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <comment type="line">// implementation</comment>
    </block_content>}</block></function>
    
    <class>class <name>ListenThread</name> <super_list><implements>implements <super><name>Runnable</name></super></implements></super_list> <block>{
        
        <decl_stmt><decl><type><specifier>private</specifier> <name>Socket</name></type> <name>socket</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <name>SocketServer</name></type> <name>server</name></decl>;</decl_stmt>
        
        <constructor><name>ListenThread</name><parameter_list>(<parameter><decl><type><name>Socket</name></type> <name>socket</name></decl></parameter>, <parameter><decl><type><name>SocketServer</name></type> <name>server</name></decl></parameter>)</parameter_list> <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>socket</name></name> <operator>=</operator> <name>socket</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>server</name></name> <operator>=</operator> <name>server</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
        
        <function><annotation>@<name>Override</name></annotation>
        <type><specifier>public</specifier> <name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{<block_content>
            <try>try <block>{<block_content>
                <comment type="line">// implementation</comment>
            </block_content>}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{<block_content>
                <comment type="line">// handle exception</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>
    }</block></class>
}</block></class></unit>
