<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/testOccThm_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="15:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:25">OccThmTester</name> <block pos:start="1:27" pos:end="15:1">{
    <function pos:start="2:5" pos:end="14:5"><type pos:start="2:5" pos:end="2:15"><specifier pos:start="2:5" pos:end="2:10">public</specifier> <name pos:start="2:12" pos:end="2:15">void</name></type> <name pos:start="2:17" pos:end="2:26">testOccThm</name><parameter_list pos:start="2:27" pos:end="2:28">()</parameter_list> <throws pos:start="2:30" pos:end="2:45">throws <argument pos:start="2:37" pos:end="2:45"><expr pos:start="2:37" pos:end="2:45"><name pos:start="2:37" pos:end="2:45">Exception</name></expr></argument></throws> <block pos:start="2:47" pos:end="14:5">{<block_content pos:start="3:9" pos:end="13:58">
        <decl_stmt pos:start="3:9" pos:end="3:116"><decl pos:start="3:9" pos:end="3:115"><type pos:start="3:9" pos:end="3:26"><specifier pos:start="3:9" pos:end="3:13">final</specifier> <name pos:start="3:15" pos:end="3:26">IContextRoot</name></type> <name pos:start="3:28" pos:end="3:34">context</name> <init pos:start="3:36" pos:end="3:115">= <expr pos:start="3:38" pos:end="3:115"><call pos:start="3:38" pos:end="3:115"><name pos:start="3:38" pos:end="3:64"><name pos:start="3:38" pos:end="3:50">ResourceUtils</name><operator pos:start="3:51" pos:end="3:51">.</operator><name pos:start="3:52" pos:end="3:64">createContext</name></name><argument_list pos:start="3:65" pos:end="3:115">( <argument pos:start="3:67" pos:end="3:78"><expr pos:start="3:67" pos:end="3:78"><name pos:start="3:67" pos:end="3:78">rodinProject</name></expr></argument>, <argument pos:start="3:81" pos:end="3:93"><expr pos:start="3:81" pos:end="3:93"><name pos:start="3:81" pos:end="3:93">CTX_BARE_NAME</name></expr></argument>, <argument pos:start="3:96" pos:end="3:113"><expr pos:start="3:96" pos:end="3:113"><name pos:start="3:96" pos:end="3:113">CST_1DECL_1REF_THM</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="4:9" pos:end="4:72"><decl pos:start="4:9" pos:end="4:71"><type pos:start="4:9" pos:end="4:23"><specifier pos:start="4:9" pos:end="4:13">final</specifier> <name pos:start="4:15" pos:end="4:23">IConstant</name></type> <name pos:start="4:25" pos:end="4:28">cst1</name> <init pos:start="4:30" pos:end="4:71">= <expr pos:start="4:32" pos:end="4:71"><call pos:start="4:32" pos:end="4:71"><name pos:start="4:32" pos:end="4:50"><name pos:start="4:32" pos:end="4:38">context</name><operator pos:start="4:39" pos:end="4:39">.</operator><name pos:start="4:40" pos:end="4:50">getConstant</name></name><argument_list pos:start="4:51" pos:end="4:71">( <argument pos:start="4:53" pos:end="4:69"><expr pos:start="4:53" pos:end="4:69"><name pos:start="4:53" pos:end="4:69">INTERNAL_ELEMENT1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="5:9" pos:end="5:60"><decl pos:start="5:9" pos:end="5:59"><type pos:start="5:9" pos:end="5:26"><specifier pos:start="5:9" pos:end="5:13">final</specifier> <name pos:start="5:15" pos:end="5:26">IDeclaration</name></type> <name pos:start="5:28" pos:end="5:35">declCst1</name> <init pos:start="5:37" pos:end="5:59">= <expr pos:start="5:39" pos:end="5:59"><call pos:start="5:39" pos:end="5:59"><name pos:start="5:39" pos:end="5:45">newDecl</name><argument_list pos:start="5:46" pos:end="5:59">( <argument pos:start="5:48" pos:end="5:51"><expr pos:start="5:48" pos:end="5:51"><name pos:start="5:48" pos:end="5:51">cst1</name></expr></argument>, <argument pos:start="5:54" pos:end="5:57"><expr pos:start="5:54" pos:end="5:57"><name pos:start="5:54" pos:end="5:57">CST1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="6:9" pos:end="6:65"><decl pos:start="6:9" pos:end="6:64"><type pos:start="6:9" pos:end="6:20"><specifier pos:start="6:9" pos:end="6:13">final</specifier> <name pos:start="6:15" pos:end="6:20">IAxiom</name></type> <name pos:start="6:22" pos:end="6:24">thm</name> <init pos:start="6:26" pos:end="6:64">= <expr pos:start="6:28" pos:end="6:64"><call pos:start="6:28" pos:end="6:64"><name pos:start="6:28" pos:end="6:43"><name pos:start="6:28" pos:end="6:34">context</name><operator pos:start="6:35" pos:end="6:35">.</operator><name pos:start="6:36" pos:end="6:43">getAxiom</name></name><argument_list pos:start="6:44" pos:end="6:64">( <argument pos:start="6:46" pos:end="6:62"><expr pos:start="6:46" pos:end="6:62"><name pos:start="6:46" pos:end="6:62">INTERNAL_ELEMENT1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="7:9" pos:end="7:71"><decl pos:start="7:9" pos:end="7:70"><type pos:start="7:9" pos:end="7:25"><specifier pos:start="7:9" pos:end="7:13">final</specifier> <name pos:start="7:15" pos:end="7:25">IOccurrence</name></type> <name pos:start="7:27" pos:end="7:32">occRef</name> <init pos:start="7:34" pos:end="7:70">= <expr pos:start="7:36" pos:end="7:70"><call pos:start="7:36" pos:end="7:70"><name pos:start="7:36" pos:end="7:46">makeRefPred</name><argument_list pos:start="7:47" pos:end="7:70">( <argument pos:start="7:49" pos:end="7:51"><expr pos:start="7:49" pos:end="7:51"><name pos:start="7:49" pos:end="7:51">thm</name></expr></argument>, <argument pos:start="7:54" pos:end="7:54"><expr pos:start="7:54" pos:end="7:54"><literal type="number" pos:start="7:54" pos:end="7:54">9</literal></expr></argument>, <argument pos:start="7:57" pos:end="7:58"><expr pos:start="7:57" pos:end="7:58"><literal type="number" pos:start="7:57" pos:end="7:58">13</literal></expr></argument>, <argument pos:start="7:61" pos:end="7:68"><expr pos:start="7:61" pos:end="7:68"><name pos:start="7:61" pos:end="7:68">declCst1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="8:9" pos:end="8:56"><decl pos:start="8:9" pos:end="8:55"><type pos:start="8:9" pos:end="8:24"><specifier pos:start="8:9" pos:end="8:13">final</specifier> <name pos:start="8:15" pos:end="8:24">BridgeStub</name></type> <name pos:start="8:26" pos:end="8:27">tk</name> <init pos:start="8:29" pos:end="8:55">= <expr pos:start="8:31" pos:end="8:55"><operator pos:start="8:31" pos:end="8:33">new</operator> <call pos:start="8:35" pos:end="8:55"><name pos:start="8:35" pos:end="8:44">BridgeStub</name><argument_list pos:start="8:45" pos:end="8:55">( <argument pos:start="8:47" pos:end="8:53"><expr pos:start="8:47" pos:end="8:53"><name pos:start="8:47" pos:end="8:53">context</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="9:9" pos:end="9:60"><decl pos:start="9:9" pos:end="9:59"><type pos:start="9:9" pos:end="9:28"><specifier pos:start="9:9" pos:end="9:13">final</specifier> <name pos:start="9:15" pos:end="9:28">ContextIndexer</name></type> <name pos:start="9:30" pos:end="9:36">indexer</name> <init pos:start="9:38" pos:end="9:59">= <expr pos:start="9:40" pos:end="9:59"><operator pos:start="9:40" pos:end="9:42">new</operator> <call pos:start="9:44" pos:end="9:59"><name pos:start="9:44" pos:end="9:57">ContextIndexer</name><argument_list pos:start="9:58" pos:end="9:59">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="11:9" pos:end="11:41"><expr pos:start="11:9" pos:end="11:40"><call pos:start="11:9" pos:end="11:40"><name pos:start="11:9" pos:end="11:18">assertTrue</name><argument_list pos:start="11:19" pos:end="11:40">( <argument pos:start="11:21" pos:end="11:39"><expr pos:start="11:21" pos:end="11:39"><call pos:start="11:21" pos:end="11:39"><name pos:start="11:21" pos:end="11:33"><name pos:start="11:21" pos:end="11:27">indexer</name><operator pos:start="11:28" pos:end="11:28">.</operator><name pos:start="11:29" pos:end="11:33">index</name></name><argument_list pos:start="11:34" pos:end="11:39">( <argument pos:start="11:36" pos:end="11:37"><expr pos:start="11:36" pos:end="11:37"><name pos:start="11:36" pos:end="11:37">tk</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="13:9" pos:end="13:58"><expr pos:start="13:9" pos:end="13:57"><call pos:start="13:9" pos:end="13:57"><name pos:start="13:9" pos:end="13:41"><name pos:start="13:9" pos:end="13:10">tk</name><operator pos:start="13:11" pos:end="13:11">.</operator><name pos:start="13:12" pos:end="13:41">assertOccurrencesOtherThanDecl</name></name><argument_list pos:start="13:42" pos:end="13:57">( <argument pos:start="13:44" pos:end="13:47"><expr pos:start="13:44" pos:end="13:47"><name pos:start="13:44" pos:end="13:47">cst1</name></expr></argument>, <argument pos:start="13:50" pos:end="13:55"><expr pos:start="13:50" pos:end="13:55"><name pos:start="13:50" pos:end="13:55">occRef</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class></unit>
