<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="wrapped_functions/testOccThm_wrapped.java"><class><specifier>public</specifier> class <name>OccThmTester</name> <block>{
    <function><type><specifier>public</specifier> <name>void</name></type> <name>testOccThm</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{<block_content>
        <decl_stmt><decl><type><specifier>final</specifier> <name>IContextRoot</name></type> <name>context</name> <init>= <expr><call><name><name>ResourceUtils</name><operator>.</operator><name>createContext</name></name><argument_list>( <argument><expr><name>rodinProject</name></expr></argument>, <argument><expr><name>CTX_BARE_NAME</name></expr></argument>, <argument><expr><name>CST_1DECL_1REF_THM</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>IConstant</name></type> <name>cst1</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getConstant</name></name><argument_list>( <argument><expr><name>INTERNAL_ELEMENT1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>IDeclaration</name></type> <name>declCst1</name> <init>= <expr><call><name>newDecl</name><argument_list>( <argument><expr><name>cst1</name></expr></argument>, <argument><expr><name>CST1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>IAxiom</name></type> <name>thm</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getAxiom</name></name><argument_list>( <argument><expr><name>INTERNAL_ELEMENT1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>IOccurrence</name></type> <name>occRef</name> <init>= <expr><call><name>makeRefPred</name><argument_list>( <argument><expr><name>thm</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>declCst1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BridgeStub</name></type> <name>tk</name> <init>= <expr><operator>new</operator> <call><name>BridgeStub</name><argument_list>( <argument><expr><name>context</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ContextIndexer</name></type> <name>indexer</name> <init>= <expr><operator>new</operator> <call><name>ContextIndexer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>( <argument><expr><call><name><name>indexer</name><operator>.</operator><name>index</name></name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>tk</name><operator>.</operator><name>assertOccurrencesOtherThanDecl</name></name><argument_list>( <argument><expr><name>cst1</name></expr></argument>, <argument><expr><name>occRef</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class></unit>
