<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/testNegativeParseCases_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="12:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:22">TestCases</name> <block pos:start="1:24" pos:end="12:1">{
  <function pos:start="2:3" pos:end="11:3"><type pos:start="2:3" pos:end="2:13"><specifier pos:start="2:3" pos:end="2:8">public</specifier> <name pos:start="2:10" pos:end="2:13">void</name></type> <name pos:start="2:15" pos:end="2:36">testNegativeParseCases</name><parameter_list pos:start="2:37" pos:end="2:38">()</parameter_list> <block pos:start="2:40" pos:end="11:3">{<block_content pos:start="3:5" pos:end="10:18">
    <expr_stmt pos:start="3:5" pos:end="3:49"><expr pos:start="3:5" pos:end="3:48"><call pos:start="3:5" pos:end="3:48"><name pos:start="3:5" pos:end="3:11">verbose</name><argument_list pos:start="3:12" pos:end="3:48">( <argument pos:start="3:14" pos:end="3:46"><expr pos:start="3:14" pos:end="3:46"><literal type="string" pos:start="3:14" pos:end="3:46">"---&gt;Negative parse tests  START"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for pos:start="5:5" pos:end="7:5">for <control pos:start="5:9" pos:end="5:57">( <init pos:start="5:11" pos:end="5:20"><decl pos:start="5:11" pos:end="5:19"><type pos:start="5:11" pos:end="5:13"><name pos:start="5:11" pos:end="5:13">int</name></type> <name pos:start="5:15" pos:end="5:15">i</name> <init pos:start="5:17" pos:end="5:19">= <expr pos:start="5:19" pos:end="5:19"><literal type="number" pos:start="5:19" pos:end="5:19">0</literal></expr></init></decl>;</init> <condition pos:start="5:22" pos:end="5:51"><expr pos:start="5:22" pos:end="5:50"><name pos:start="5:22" pos:end="5:22">i</name> <operator pos:start="5:24" pos:end="5:24">&lt;</operator> <name pos:start="5:26" pos:end="5:50"><name pos:start="5:26" pos:end="5:43">negativeParseTests</name><operator pos:start="5:44" pos:end="5:44">.</operator><name pos:start="5:45" pos:end="5:50">length</name></name></expr>;</condition> <incr pos:start="5:53" pos:end="5:55"><expr pos:start="5:53" pos:end="5:55"><name pos:start="5:53" pos:end="5:53">i</name><operator pos:start="5:54" pos:end="5:55">++</operator></expr></incr> )</control> <block pos:start="5:59" pos:end="7:5">{<block_content pos:start="6:9" pos:end="6:54">
        <expr_stmt pos:start="6:9" pos:end="6:54"><expr pos:start="6:9" pos:end="6:53"><call pos:start="6:9" pos:end="6:53"><name pos:start="6:9" pos:end="6:19">parseFilter</name><argument_list pos:start="6:20" pos:end="6:53">( <argument pos:start="6:22" pos:end="6:44"><expr pos:start="6:22" pos:end="6:44"><name pos:start="6:22" pos:end="6:44"><name pos:start="6:22" pos:end="6:39">negativeParseTests</name><index pos:start="6:40" pos:end="6:44">[ <expr pos:start="6:42" pos:end="6:42"><name pos:start="6:42" pos:end="6:42">i</name></expr> ]</index></name></expr></argument>, <argument pos:start="6:47" pos:end="6:51"><expr pos:start="6:47" pos:end="6:51"><literal type="boolean" pos:start="6:47" pos:end="6:51">false</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="line" pos:start="8:5" pos:end="8:70">// This used to fail until the parser was rewritten with the stack</comment>
    <comment type="line" pos:start="9:5" pos:end="9:71">// stuff so that it can clean up partially parsed expression trees.</comment>
    <expr_stmt pos:start="10:5" pos:end="10:18"><expr pos:start="10:5" pos:end="10:17"><call pos:start="10:5" pos:end="10:17"><name pos:start="10:5" pos:end="10:15">checkDelete</name><argument_list pos:start="10:16" pos:end="10:17">()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></function>
}</block></class></unit>
