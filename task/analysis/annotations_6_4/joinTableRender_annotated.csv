word,occurrence,tree_parts
private,0,"['function', 'type', 'specifier']"
String,0,"['function', 'type', 'name']"
joinTableRender,0,"['function', 'name']"
Table,0,"['function', 'parameter_list', 'parameter', 'decl', 'type', 'name']"
from,0,"['function', 'parameter_list', 'parameter', 'decl', 'name']"
Association,0,"['function', 'parameter_list', 'parameter', 'decl', 'type', 'name']"
association,0,"['function', 'parameter_list', 'parameter', 'decl', 'name']"
int,0,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'type', 'name']"
n,0,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'name']"
=,0,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'init']"
0,0,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'init', 'expr', 'literal']"
for,0,"['function', 'block', 'block_content', 'for']"
Association,1,"['function', 'block', 'block_content', 'for', 'control', 'init', 'decl', 'type', 'name']"
a,0,"['function', 'block', 'block_content', 'for', 'control', 'init', 'decl', 'name']"
:,0,"['function', 'block', 'block_content', 'for', 'control', 'init', 'decl', 'range']"
from,1,"['function', 'block', 'block_content', 'for', 'control', 'init', 'decl', 'range', 'expr', 'name', 'name']"
associations,0,"['function', 'block', 'block_content', 'for', 'control', 'init', 'decl', 'range', 'expr', 'name', 'name']"
if,0,"['function', 'block', 'block_content', 'for', 'block', 'block_content', 'if_stmt', 'if']"
a,1,"['function', 'block', 'block_content', 'for', 'block', 'block_content', 'if_stmt', 'if', 'condition', 'expr', 'name', 'name']"
destination,0,"['function', 'block', 'block_content', 'for', 'block', 'block_content', 'if_stmt', 'if', 'condition', 'expr', 'name', 'name']"
==,0,"['function', 'block', 'block_content', 'for', 'block', 'block_content', 'if_stmt', 'if', 'condition', 'expr', 'operator']"
association,1,"['function', 'block', 'block_content', 'for', 'block', 'block_content', 'if_stmt', 'if', 'condition', 'expr', 'name', 'name']"
destination,1,"['function', 'block', 'block_content', 'for', 'block', 'block_content', 'if_stmt', 'if', 'condition', 'expr', 'name', 'name']"
++,0,"['function', 'block', 'block_content', 'for', 'block', 'block_content', 'if_stmt', 'if', 'block', 'block_content', 'expr_stmt', 'expr', 'operator']"
n,1,"['function', 'block', 'block_content', 'for', 'block', 'block_content', 'if_stmt', 'if', 'block', 'block_content', 'expr_stmt', 'expr', 'name']"
return,0,"['function', 'block', 'block_content', 'return']"
datamodel,0,"['function', 'block', 'block_content', 'return', 'expr', 'call', 'name', 'name']"
getDisplayName,0,"['function', 'block', 'block_content', 'return', 'expr', 'call', 'name', 'name']"
association,2,"['function', 'block', 'block_content', 'return', 'expr', 'call', 'argument_list', 'argument', 'expr', 'name', 'name']"
destination,2,"['function', 'block', 'block_content', 'return', 'expr', 'call', 'argument_list', 'argument', 'expr', 'name', 'name']"
+,0,"['function', 'block', 'block_content', 'return', 'expr', 'operator']"
n,2,"['function', 'block', 'block_content', 'return', 'expr', 'ternary', 'condition', 'expr', 'name']"
>,0,"['function', 'block', 'block_content', 'return', 'expr', 'ternary', 'condition', 'expr', 'operator']"
1,0,"['function', 'block', 'block_content', 'return', 'expr', 'ternary', 'condition', 'expr', 'literal']"
?,0,"['function', 'block', 'block_content', 'return', 'expr', 'ternary', 'condition']"
""" on """,0,"['function', 'block', 'block_content', 'return', 'expr', 'ternary', 'then', 'expr', 'literal']"
+,1,"['function', 'block', 'block_content', 'return', 'expr', 'ternary', 'then', 'expr', 'operator']"
association,3,"['function', 'block', 'block_content', 'return', 'expr', 'ternary', 'then', 'expr', 'call', 'name', 'name']"
getName,0,"['function', 'block', 'block_content', 'return', 'expr', 'ternary', 'then', 'expr', 'call', 'name', 'name']"
:,1,"['function', 'block', 'block_content', 'return', 'expr', 'ternary', 'else']"
"""""",0,"['function', 'block', 'block_content', 'return', 'expr', 'ternary', 'else', 'expr', 'literal']"