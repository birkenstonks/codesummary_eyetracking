word,occurrence,tree_parts
public,0,"['function', 'type', 'specifier']"
void,0,"['function', 'type', 'name']"
testAddCountryWithSequenceGenerator,0,"['function', 'name']"
throws,0,"['function', 'throws']"
Exception,0,"['function', 'throws', 'argument', 'expr', 'name']"
CountryWithSequence,0,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'type', 'name']"
country1,0,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'name']"
=,0,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'init']"
new,0,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'init', 'expr', 'operator']"
CountryWithSequence,1,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'init', 'expr', 'call', 'name']"
country1,1,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'name', 'name']"
setCountryId,0,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'name', 'name']"
"""KR""",0,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'argument_list', 'argument', 'expr', 'literal']"
country1,2,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'name', 'name']"
setCountryName,0,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'name', 'name']"
"""Korea""",0,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'argument_list', 'argument', 'expr', 'literal']"
Integer,0,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'type', 'name']"
countryCode,0,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'name']"
=,1,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'init']"
Integer,1,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'init', 'expr', 'name']"
session,0,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'init', 'expr', 'call', 'name', 'name']"
save,0,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'init', 'expr', 'call', 'name', 'name']"
country1,3,"['function', 'block', 'block_content', 'decl_stmt', 'decl', 'init', 'expr', 'call', 'argument_list', 'argument', 'expr', 'name']"
assertEquals,0,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'name']"
"""fail to generate a new countryCode.""",0,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'argument_list', 'argument', 'expr', 'literal']"
0,0,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'argument_list', 'argument', 'expr', 'literal']"
countryCode,1,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'argument_list', 'argument', 'expr', 'call', 'name', 'name']"
intValue,0,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'argument_list', 'argument', 'expr', 'call', 'name', 'name']"
assertNotNull,0,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'name']"
"""fail to add a new country with sequence generator.""",0,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'argument_list', 'argument', 'expr', 'literal']"
countryCode,2,"['function', 'block', 'block_content', 'expr_stmt', 'expr', 'call', 'argument_list', 'argument', 'expr', 'name']"