<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/getStatusFlagFields_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="15:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:20">MyClass</name> <block pos:start="1:22" pos:end="15:1">{
    
    <function pos:start="3:5" pos:end="14:5"><type pos:start="3:5" pos:end="3:15"><specifier pos:start="3:5" pos:end="3:10">public</specifier> <name pos:start="3:12" pos:end="3:15">List</name></type> <name pos:start="3:17" pos:end="3:35">getStatusFlagFields</name><parameter_list pos:start="3:36" pos:end="3:37">()</parameter_list> <block pos:start="3:39" pos:end="14:5">{<block_content pos:start="4:9" pos:end="13:20">
        <decl_stmt pos:start="4:9" pos:end="4:36"><decl pos:start="4:9" pos:end="4:35"><type pos:start="4:9" pos:end="4:12"><name pos:start="4:9" pos:end="4:12">List</name></type> <name pos:start="4:14" pos:end="4:17">list</name> <init pos:start="4:19" pos:end="4:35">= <expr pos:start="4:21" pos:end="4:35"><operator pos:start="4:21" pos:end="4:23">new</operator> <call pos:start="4:25" pos:end="4:35"><name pos:start="4:25" pos:end="4:33">ArrayList</name><argument_list pos:start="4:34" pos:end="4:35">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="5:9" pos:end="5:88"><decl pos:start="5:9" pos:end="5:87"><type pos:start="5:9" pos:end="5:14"><name pos:start="5:9" pos:end="5:14">String</name></type> <name pos:start="5:16" pos:end="5:29">statusFlagPath</name> <init pos:start="5:31" pos:end="5:87">= <expr pos:start="5:33" pos:end="5:87"><literal type="string" pos:start="5:33" pos:end="5:87">"/collectionConfigRecord/statusFlags/statusFlag/status"</literal></expr></init></decl>;</decl_stmt>
        <for pos:start="6:9" pos:end="12:9">for <control pos:start="6:13" pos:end="6:73">( <init pos:start="6:15" pos:end="6:58"><decl pos:start="6:15" pos:end="6:57"><type pos:start="6:15" pos:end="6:22"><name pos:start="6:15" pos:end="6:22">Iterator</name></type> <name pos:start="6:24" pos:end="6:24">i</name> <init pos:start="6:26" pos:end="6:57">= <expr pos:start="6:28" pos:end="6:57"><call pos:start="6:28" pos:end="6:46"><name pos:start="6:28" pos:end="6:44"><name pos:start="6:28" pos:end="6:29">im</name><operator pos:start="6:30" pos:end="6:30">.</operator><name pos:start="6:31" pos:end="6:44">getInputFields</name></name><argument_list pos:start="6:45" pos:end="6:46">()</argument_list></call><operator pos:start="6:47" pos:end="6:47">.</operator><call pos:start="6:48" pos:end="6:57"><name pos:start="6:48" pos:end="6:55">iterator</name><argument_list pos:start="6:56" pos:end="6:57">()</argument_list></call></expr></init></decl>;</init> <condition pos:start="6:60" pos:end="6:71"><expr pos:start="6:60" pos:end="6:70"><call pos:start="6:60" pos:end="6:70"><name pos:start="6:60" pos:end="6:68"><name pos:start="6:60" pos:end="6:60">i</name><operator pos:start="6:61" pos:end="6:61">.</operator><name pos:start="6:62" pos:end="6:68">hasNext</name></name><argument_list pos:start="6:69" pos:end="6:70">()</argument_list></call></expr>;</condition> <incr/>)</control> <block pos:start="6:75" pos:end="12:9">{<block_content pos:start="7:13" pos:end="11:13">
            <decl_stmt pos:start="7:13" pos:end="7:55"><decl pos:start="7:13" pos:end="7:54"><type pos:start="7:13" pos:end="7:22"><name pos:start="7:13" pos:end="7:22">InputField</name></type> <name pos:start="7:24" pos:end="7:28">field</name> <init pos:start="7:30" pos:end="7:54">= <expr pos:start="7:32" pos:end="7:54"><operator pos:start="7:32" pos:end="7:32">(</operator> <name pos:start="7:34" pos:end="7:43">InputField</name> <operator pos:start="7:45" pos:end="7:45">)</operator> <call pos:start="7:47" pos:end="7:54"><name pos:start="7:47" pos:end="7:52"><name pos:start="7:47" pos:end="7:47">i</name><operator pos:start="7:48" pos:end="7:48">.</operator><name pos:start="7:49" pos:end="7:52">next</name></name><argument_list pos:start="7:53" pos:end="7:54">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line" pos:start="8:13" pos:end="8:42">// prtln ( field.toString() );</comment>
            <if_stmt pos:start="9:13" pos:end="11:13"><if pos:start="9:13" pos:end="11:13">if <condition pos:start="9:16" pos:end="9:73">( <expr pos:start="9:18" pos:end="9:72"><call pos:start="9:18" pos:end="9:43"><name pos:start="9:18" pos:end="9:41"><name pos:start="9:18" pos:end="9:22">field</name><operator pos:start="9:23" pos:end="9:23">.</operator><name pos:start="9:24" pos:end="9:41">getNormalizedXPath</name></name><argument_list pos:start="9:42" pos:end="9:43">()</argument_list></call><operator pos:start="9:44" pos:end="9:44">.</operator><call pos:start="9:45" pos:end="9:72"><name pos:start="9:45" pos:end="9:54">startsWith</name><argument_list pos:start="9:55" pos:end="9:72">( <argument pos:start="9:57" pos:end="9:70"><expr pos:start="9:57" pos:end="9:70"><name pos:start="9:57" pos:end="9:70">statusFlagPath</name></expr></argument> )</argument_list></call></expr>)</condition> <block pos:start="9:75" pos:end="11:13">{<block_content pos:start="10:17" pos:end="10:34">
                <expr_stmt pos:start="10:17" pos:end="10:34"><expr pos:start="10:17" pos:end="10:33"><call pos:start="10:17" pos:end="10:33"><name pos:start="10:17" pos:end="10:24"><name pos:start="10:17" pos:end="10:20">list</name><operator pos:start="10:21" pos:end="10:21">.</operator><name pos:start="10:22" pos:end="10:24">add</name></name><argument_list pos:start="10:25" pos:end="10:33">( <argument pos:start="10:27" pos:end="10:31"><expr pos:start="10:27" pos:end="10:31"><name pos:start="10:27" pos:end="10:31">field</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return pos:start="13:9" pos:end="13:20">return <expr pos:start="13:16" pos:end="13:19"><name pos:start="13:16" pos:end="13:19">list</name></expr>;</return>
    </block_content>}</block></function>
}</block></class> </unit>
