<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/print2_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="24:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:26">PrintFunction</name> <block pos:start="1:28" pos:end="24:1">{
    <function pos:start="2:5" pos:end="23:5"><type pos:start="2:5" pos:end="2:18"><specifier pos:start="2:5" pos:end="2:13">protected</specifier> <name pos:start="2:15" pos:end="2:18">void</name></type> <name pos:start="2:20" pos:end="2:24">print</name><parameter_list pos:start="2:25" pos:end="2:26">()</parameter_list> <block pos:start="2:28" pos:end="23:5">{<block_content pos:start="3:9" pos:end="22:71">
        <expr_stmt pos:start="3:9" pos:end="3:78"><expr pos:start="3:9" pos:end="3:77"><call pos:start="3:9" pos:end="3:77"><name pos:start="3:9" pos:end="3:26"><name pos:start="3:9" pos:end="3:14">System</name><operator pos:start="3:15" pos:end="3:15">.</operator><name pos:start="3:16" pos:end="3:18">out</name><operator pos:start="3:19" pos:end="3:19">.</operator><name pos:start="3:20" pos:end="3:26">println</name></name><argument_list pos:start="3:27" pos:end="3:77">( <argument pos:start="3:29" pos:end="3:75"><expr pos:start="3:29" pos:end="3:75"><literal type="string" pos:start="3:29" pos:end="3:40">"Print for "</literal> <operator pos:start="3:42" pos:end="3:42">+</operator> <name pos:start="3:44" pos:end="3:52">prototype</name> <operator pos:start="3:54" pos:end="3:54">+</operator> <literal type="string" pos:start="3:56" pos:end="3:75">"------------------"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="4:9" pos:end="21:11"><expr pos:start="4:9" pos:end="21:10"><call pos:start="4:9" pos:end="21:10"><name pos:start="4:9" pos:end="4:17"><name pos:start="4:9" pos:end="4:11">cfg</name><operator pos:start="4:12" pos:end="4:12">.</operator><name pos:start="4:13" pos:end="4:17">visit</name></name><argument_list pos:start="4:18" pos:end="21:10">( <argument pos:start="4:20" pos:end="21:9"><expr pos:start="4:20" pos:end="21:9"><operator pos:start="4:20" pos:end="4:22">new</operator> <class pos:start="4:24" pos:end="21:9"><super pos:start="4:24" pos:end="4:35"><name pos:start="4:24" pos:end="4:35">PrintVisitor</name></super><argument_list pos:start="4:36" pos:end="4:37">()</argument_list> <block pos:start="4:39" pos:end="21:9">{
            <decl_stmt pos:start="5:13" pos:end="5:27"><decl pos:start="5:13" pos:end="5:26"><type pos:start="5:13" pos:end="5:15"><name pos:start="5:13" pos:end="5:15">Phi</name></type> <name pos:start="5:17" pos:end="5:19">phi</name> <init pos:start="5:21" pos:end="5:26">= <expr pos:start="5:23" pos:end="5:26"><literal type="null" pos:start="5:23" pos:end="5:26">null</literal></expr></init></decl>;</decl_stmt>

            <function pos:start="7:13" pos:end="10:13"><type pos:start="7:13" pos:end="7:23"><specifier pos:start="7:13" pos:end="7:18">public</specifier> <name pos:start="7:20" pos:end="7:23">void</name></type> <name pos:start="7:25" pos:end="7:34">visitBlock</name><parameter_list pos:start="7:35" pos:end="7:55">( <parameter pos:start="7:37" pos:end="7:53"><decl pos:start="7:37" pos:end="7:53"><type pos:start="7:37" pos:end="7:47"><specifier pos:start="7:37" pos:end="7:41">final</specifier> <name pos:start="7:43" pos:end="7:47">Block</name></type> <name pos:start="7:49" pos:end="7:53">block</name></decl></parameter> )</parameter_list> <block pos:start="7:57" pos:end="10:13">{<block_content pos:start="8:17" pos:end="9:42">
                <expr_stmt pos:start="8:17" pos:end="8:46"><expr pos:start="8:17" pos:end="8:45"><name pos:start="8:17" pos:end="8:19">phi</name> <operator pos:start="8:21" pos:end="8:21">=</operator> <call pos:start="8:23" pos:end="8:45"><name pos:start="8:23" pos:end="8:36">exprPhiAtBlock</name><argument_list pos:start="8:37" pos:end="8:45">( <argument pos:start="8:39" pos:end="8:43"><expr pos:start="8:39" pos:end="8:43"><name pos:start="8:39" pos:end="8:43">block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="9:17" pos:end="9:42"><expr pos:start="9:17" pos:end="9:41"><call pos:start="9:17" pos:end="9:41"><name pos:start="9:17" pos:end="9:32"><name pos:start="9:17" pos:end="9:21">super</name><operator pos:start="9:22" pos:end="9:22">.</operator><name pos:start="9:23" pos:end="9:32">visitBlock</name></name><argument_list pos:start="9:33" pos:end="9:41">( <argument pos:start="9:35" pos:end="9:39"><expr pos:start="9:35" pos:end="9:39"><name pos:start="9:35" pos:end="9:39">block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></function>
            <function pos:start="11:13" pos:end="20:13"><type pos:start="11:13" pos:end="11:23"><specifier pos:start="11:13" pos:end="11:18">public</specifier> <name pos:start="11:20" pos:end="11:23">void</name></type> <name pos:start="11:25" pos:end="11:38">visitLabelStmt</name><parameter_list pos:start="11:39" pos:end="11:62">( <parameter pos:start="11:41" pos:end="11:60"><decl pos:start="11:41" pos:end="11:60"><type pos:start="11:41" pos:end="11:55"><specifier pos:start="11:41" pos:end="11:45">final</specifier> <name pos:start="11:47" pos:end="11:55">LabelStmt</name></type> <name pos:start="11:57" pos:end="11:60">stmt</name></decl></parameter> )</parameter_list> <block pos:start="11:64" pos:end="20:13">{<block_content pos:start="12:17" pos:end="19:17">
                <expr_stmt pos:start="12:17" pos:end="12:45"><expr pos:start="12:17" pos:end="12:44"><call pos:start="12:17" pos:end="12:44"><name pos:start="12:17" pos:end="12:36"><name pos:start="12:17" pos:end="12:21">super</name><operator pos:start="12:22" pos:end="12:22">.</operator><name pos:start="12:23" pos:end="12:36">visitLabelStmt</name></name><argument_list pos:start="12:37" pos:end="12:44">( <argument pos:start="12:39" pos:end="12:42"><expr pos:start="12:39" pos:end="12:42"><name pos:start="12:39" pos:end="12:42">stmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="14:17" pos:end="19:17"><if pos:start="14:17" pos:end="19:17">if <condition pos:start="14:20" pos:end="14:49">( <expr pos:start="14:22" pos:end="14:47"><call pos:start="14:22" pos:end="14:33"><name pos:start="14:22" pos:end="14:31"><name pos:start="14:22" pos:end="14:25">stmt</name><operator pos:start="14:26" pos:end="14:26">.</operator><name pos:start="14:27" pos:end="14:31">label</name></name><argument_list pos:start="14:32" pos:end="14:33">()</argument_list></call><operator pos:start="14:34" pos:end="14:34">.</operator><call pos:start="14:35" pos:end="14:47"><name pos:start="14:35" pos:end="14:45">startsBlock</name><argument_list pos:start="14:46" pos:end="14:47">()</argument_list></call></expr> )</condition> <block pos:start="14:51" pos:end="19:17">{<block_content pos:start="15:21" pos:end="18:21">
                    <if_stmt pos:start="15:21" pos:end="18:21"><if pos:start="15:21" pos:end="18:21">if <condition pos:start="15:24" pos:end="15:38">( <expr pos:start="15:26" pos:end="15:36"><name pos:start="15:26" pos:end="15:28">phi</name> <operator pos:start="15:30" pos:end="15:31">!=</operator> <literal type="null" pos:start="15:33" pos:end="15:36">null</literal></expr> )</condition> <block pos:start="15:40" pos:end="18:21">{<block_content pos:start="16:25" pos:end="17:35">
                        <expr_stmt pos:start="16:25" pos:end="16:39"><expr pos:start="16:25" pos:end="16:38"><call pos:start="16:25" pos:end="16:38"><name pos:start="16:25" pos:end="16:31">println</name><argument_list pos:start="16:32" pos:end="16:38">( <argument pos:start="16:34" pos:end="16:36"><expr pos:start="16:34" pos:end="16:36"><name pos:start="16:34" pos:end="16:36">phi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="17:25" pos:end="17:35"><expr pos:start="17:25" pos:end="17:34"><name pos:start="17:25" pos:end="17:27">phi</name> <operator pos:start="17:29" pos:end="17:29">=</operator> <literal type="null" pos:start="17:31" pos:end="17:34">null</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="22:9" pos:end="22:71"><expr pos:start="22:9" pos:end="22:70"><call pos:start="22:9" pos:end="22:70"><name pos:start="22:9" pos:end="22:26"><name pos:start="22:9" pos:end="22:14">System</name><operator pos:start="22:15" pos:end="22:15">.</operator><name pos:start="22:16" pos:end="22:18">out</name><operator pos:start="22:19" pos:end="22:19">.</operator><name pos:start="22:20" pos:end="22:26">println</name></name><argument_list pos:start="22:27" pos:end="22:70">( <argument pos:start="22:29" pos:end="22:68"><expr pos:start="22:29" pos:end="22:68"><literal type="string" pos:start="22:29" pos:end="22:68">"End Print ----------------------------"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class></unit>
