<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/testInvoke_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="12:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:22">TestClass</name> <block pos:start="1:24" pos:end="12:1">{
    <function pos:start="2:5" pos:end="11:5"><type pos:start="2:5" pos:end="2:15"><specifier pos:start="2:5" pos:end="2:10">public</specifier> <name pos:start="2:12" pos:end="2:15">void</name></type> <name pos:start="2:17" pos:end="2:26">testInvoke</name><parameter_list pos:start="2:27" pos:end="2:28">()</parameter_list> <throws pos:start="2:30" pos:end="2:45">throws <argument pos:start="2:37" pos:end="2:45"><expr pos:start="2:37" pos:end="2:45"><name pos:start="2:37" pos:end="2:45">Exception</name></expr></argument></throws> <block pos:start="2:47" pos:end="11:5">{<block_content pos:start="3:9" pos:end="10:43">
        <expr_stmt pos:start="3:9" pos:end="3:52"><expr pos:start="3:9" pos:end="3:51"><call pos:start="3:9" pos:end="3:51"><name pos:start="3:9" pos:end="3:34"><name pos:start="3:9" pos:end="3:17">transport</name><operator pos:start="3:18" pos:end="3:18">.</operator><name pos:start="3:19" pos:end="3:34">setRemoteService</name></name><argument_list pos:start="3:35" pos:end="3:51">(<argument pos:start="3:36" pos:end="3:50"><expr pos:start="3:36" pos:end="3:50"><literal type="string" pos:start="3:36" pos:end="3:50">"TravelProcess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="4:9" pos:end="4:38"><expr pos:start="4:9" pos:end="4:37"><call pos:start="4:9" pos:end="4:37"><name pos:start="4:9" pos:end="4:25"><name pos:start="4:9" pos:end="4:12">call</name><operator pos:start="4:13" pos:end="4:13">.</operator><name pos:start="4:14" pos:end="4:25">setOperation</name></name><argument_list pos:start="4:26" pos:end="4:37">(<argument pos:start="4:27" pos:end="4:36"><expr pos:start="4:27" pos:end="4:36"><literal type="string" pos:start="4:27" pos:end="4:36">"initiate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="5:9" pos:end="5:69"><expr pos:start="5:9" pos:end="5:68"><call pos:start="5:9" pos:end="5:68"><name pos:start="5:9" pos:end="5:25"><name pos:start="5:9" pos:end="5:12">call</name><operator pos:start="5:13" pos:end="5:13">.</operator><name pos:start="5:14" pos:end="5:25">addParameter</name></name><argument_list pos:start="5:26" pos:end="5:68">(<argument pos:start="5:27" pos:end="5:29"><expr pos:start="5:27" pos:end="5:29"><literal type="string" pos:start="5:27" pos:end="5:29">"x"</literal></expr></argument>, <argument pos:start="5:32" pos:end="5:49"><expr pos:start="5:32" pos:end="5:49"><name pos:start="5:32" pos:end="5:49"><name pos:start="5:32" pos:end="5:38">XMLType</name><operator pos:start="5:39" pos:end="5:39">.</operator><name pos:start="5:40" pos:end="5:49">XSD_STRING</name></name></expr></argument>, <argument pos:start="5:52" pos:end="5:67"><expr pos:start="5:52" pos:end="5:67"><name pos:start="5:52" pos:end="5:67"><name pos:start="5:52" pos:end="5:64">ParameterMode</name><operator pos:start="5:65" pos:end="5:65">.</operator><name pos:start="5:66" pos:end="5:67">IN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="6:9" pos:end="6:47"><expr pos:start="6:9" pos:end="6:46"><call pos:start="6:9" pos:end="6:46"><name pos:start="6:9" pos:end="6:26"><name pos:start="6:9" pos:end="6:12">call</name><operator pos:start="6:13" pos:end="6:13">.</operator><name pos:start="6:14" pos:end="6:26">setReturnType</name></name><argument_list pos:start="6:27" pos:end="6:46">(<argument pos:start="6:28" pos:end="6:45"><expr pos:start="6:28" pos:end="6:45"><name pos:start="6:28" pos:end="6:45"><name pos:start="6:28" pos:end="6:34">XMLType</name><operator pos:start="6:35" pos:end="6:35">.</operator><name pos:start="6:36" pos:end="6:45">XSD_STRING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt pos:start="8:9" pos:end="8:71"><decl pos:start="8:9" pos:end="8:70"><type pos:start="8:9" pos:end="8:14"><name pos:start="8:9" pos:end="8:14">String</name></type> <name pos:start="8:16" pos:end="8:21">result</name> <init pos:start="8:23" pos:end="8:70">= <expr pos:start="8:25" pos:end="8:70"><operator pos:start="8:25" pos:end="8:25">(</operator><name pos:start="8:26" pos:end="8:31">String</name><operator pos:start="8:32" pos:end="8:32">)</operator> <call pos:start="8:34" pos:end="8:70"><name pos:start="8:34" pos:end="8:44"><name pos:start="8:34" pos:end="8:37">call</name><operator pos:start="8:38" pos:end="8:38">.</operator><name pos:start="8:39" pos:end="8:44">invoke</name></name><argument_list pos:start="8:45" pos:end="8:70">(<argument pos:start="8:46" pos:end="8:69"><expr pos:start="8:46" pos:end="8:69"><operator pos:start="8:46" pos:end="8:48">new</operator> <name pos:start="8:50" pos:end="8:57"><name pos:start="8:50" pos:end="8:55">Object</name><index pos:start="8:56" pos:end="8:57">[]</index></name><block pos:start="8:58" pos:end="8:69">{<expr pos:start="8:59" pos:end="8:68"><literal type="string" pos:start="8:59" pos:end="8:68">"anything"</literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="10:9" pos:end="10:43"><expr pos:start="10:9" pos:end="10:42"><call pos:start="10:9" pos:end="10:42"><name pos:start="10:9" pos:end="10:20">assertEquals</name><argument_list pos:start="10:21" pos:end="10:42">(<argument pos:start="10:22" pos:end="10:33"><expr pos:start="10:22" pos:end="10:33"><name pos:start="10:22" pos:end="10:33">DUMMY_RESULT</name></expr></argument>, <argument pos:start="10:36" pos:end="10:41"><expr pos:start="10:36" pos:end="10:41"><name pos:start="10:36" pos:end="10:41">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>
}</block></class></unit>
