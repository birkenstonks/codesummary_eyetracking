<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/split_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="18:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:21">Splitter</name> <block pos:start="1:23" pos:end="18:1">{
    <function pos:start="2:5" pos:end="17:5"><type pos:start="2:5" pos:end="2:15"><specifier pos:start="2:5" pos:end="2:10">public</specifier> <name pos:start="2:12" pos:end="2:15">List</name></type> <name pos:start="2:17" pos:end="2:21">split</name><parameter_list pos:start="2:22" pos:end="2:34">(<parameter pos:start="2:23" pos:end="2:33"><decl pos:start="2:23" pos:end="2:33"><type pos:start="2:23" pos:end="2:28"><name pos:start="2:23" pos:end="2:28">String</name></type> <name pos:start="2:30" pos:end="2:33">line</name></decl></parameter>)</parameter_list> <block pos:start="2:36" pos:end="17:5">{<block_content pos:start="3:9" pos:end="16:22">
        <decl_stmt pos:start="3:9" pos:end="3:20"><decl pos:start="3:9" pos:end="3:19"><type pos:start="3:9" pos:end="3:12"><name pos:start="3:9" pos:end="3:12">List</name></type> <name pos:start="3:14" pos:end="3:19">result</name></decl>;</decl_stmt>

        <if_stmt pos:start="5:9" pos:end="15:9"><if pos:start="5:9" pos:end="7:9">if <condition pos:start="5:12" pos:end="5:25">(<expr pos:start="5:13" pos:end="5:24"><name pos:start="5:13" pos:end="5:16">line</name> <operator pos:start="5:18" pos:end="5:19">==</operator> <literal type="null" pos:start="5:21" pos:end="5:24">null</literal></expr>)</condition> <block pos:start="5:27" pos:end="7:9">{<block_content pos:start="6:13" pos:end="6:37">
            <expr_stmt pos:start="6:13" pos:end="6:37"><expr pos:start="6:13" pos:end="6:36"><name pos:start="6:13" pos:end="6:18">result</name> <operator pos:start="6:20" pos:end="6:20">=</operator> <operator pos:start="6:22" pos:end="6:24">new</operator> <call pos:start="6:26" pos:end="6:36"><name pos:start="6:26" pos:end="6:34">ArrayList</name><argument_list pos:start="6:35" pos:end="6:36">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="7:11" pos:end="15:9">else <block pos:start="7:16" pos:end="15:9">{<block_content pos:start="8:13" pos:end="14:13">
            <decl_stmt pos:start="8:13" pos:end="8:32"><decl pos:start="8:13" pos:end="8:31"><type pos:start="8:13" pos:end="8:27"><name pos:start="8:13" pos:end="8:27">StringTokenizer</name></type> <name pos:start="8:29" pos:end="8:31">tok</name></decl>;</decl_stmt>
            <expr_stmt pos:start="9:13" pos:end="9:49"><expr pos:start="9:13" pos:end="9:48"><name pos:start="9:13" pos:end="9:15">tok</name> <operator pos:start="9:17" pos:end="9:17">=</operator> <operator pos:start="9:19" pos:end="9:21">new</operator> <call pos:start="9:23" pos:end="9:48"><name pos:start="9:23" pos:end="9:37">StringTokenizer</name><argument_list pos:start="9:38" pos:end="9:48">(<argument pos:start="9:39" pos:end="9:42"><expr pos:start="9:39" pos:end="9:42"><name pos:start="9:39" pos:end="9:42">line</name></expr></argument>, <argument pos:start="9:45" pos:end="9:47"><expr pos:start="9:45" pos:end="9:47"><literal type="string" pos:start="9:45" pos:end="9:47">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="10:13" pos:end="10:54"><expr pos:start="10:13" pos:end="10:53"><name pos:start="10:13" pos:end="10:18">result</name> <operator pos:start="10:20" pos:end="10:20">=</operator> <operator pos:start="10:22" pos:end="10:24">new</operator> <call pos:start="10:26" pos:end="10:53"><name pos:start="10:26" pos:end="10:34">ArrayList</name><argument_list pos:start="10:35" pos:end="10:53">(<argument pos:start="10:36" pos:end="10:52"><expr pos:start="10:36" pos:end="10:52"><call pos:start="10:36" pos:end="10:52"><name pos:start="10:36" pos:end="10:50"><name pos:start="10:36" pos:end="10:38">tok</name><operator pos:start="10:39" pos:end="10:39">.</operator><name pos:start="10:40" pos:end="10:50">countTokens</name></name><argument_list pos:start="10:51" pos:end="10:52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="12:13" pos:end="14:13">while <condition pos:start="12:19" pos:end="12:39">(<expr pos:start="12:20" pos:end="12:38"><call pos:start="12:20" pos:end="12:38"><name pos:start="12:20" pos:end="12:36"><name pos:start="12:20" pos:end="12:22">tok</name><operator pos:start="12:23" pos:end="12:23">.</operator><name pos:start="12:24" pos:end="12:36">hasMoreTokens</name></name><argument_list pos:start="12:37" pos:end="12:38">()</argument_list></call></expr>)</condition> <block pos:start="12:41" pos:end="14:13">{<block_content pos:start="13:17" pos:end="13:44">
                <expr_stmt pos:start="13:17" pos:end="13:44"><expr pos:start="13:17" pos:end="13:43"><call pos:start="13:17" pos:end="13:43"><name pos:start="13:17" pos:end="13:26"><name pos:start="13:17" pos:end="13:22">result</name><operator pos:start="13:23" pos:end="13:23">.</operator><name pos:start="13:24" pos:end="13:26">add</name></name><argument_list pos:start="13:27" pos:end="13:43">(<argument pos:start="13:28" pos:end="13:42"><expr pos:start="13:28" pos:end="13:42"><call pos:start="13:28" pos:end="13:42"><name pos:start="13:28" pos:end="13:40"><name pos:start="13:28" pos:end="13:30">tok</name><operator pos:start="13:31" pos:end="13:31">.</operator><name pos:start="13:32" pos:end="13:40">nextToken</name></name><argument_list pos:start="13:41" pos:end="13:42">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></else></if_stmt>
        <return pos:start="16:9" pos:end="16:22">return <expr pos:start="16:16" pos:end="16:21"><name pos:start="16:16" pos:end="16:21">result</name></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
