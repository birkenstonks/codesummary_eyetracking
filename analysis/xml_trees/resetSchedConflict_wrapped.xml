<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/resetSchedConflict_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="17:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:31">ResetSchedConflict</name> <block pos:start="1:33" pos:end="17:1">{

    <function pos:start="3:5" pos:end="15:5"><type pos:start="3:5" pos:end="3:15"><specifier pos:start="3:5" pos:end="3:10">public</specifier> <name pos:start="3:12" pos:end="3:15">void</name></type> <name pos:start="3:17" pos:end="3:34">resetSchedConflict</name><parameter_list pos:start="3:35" pos:end="3:36">()</parameter_list> <block pos:start="3:38" pos:end="15:5">{<block_content pos:start="4:9" pos:end="14:9">
        <try pos:start="4:9" pos:end="14:9">try <block pos:start="4:13" pos:end="11:9">{<block_content pos:start="5:13" pos:end="10:13">
            <if_stmt pos:start="5:13" pos:end="6:23"><if pos:start="5:13" pos:end="6:23">if <condition pos:start="5:16" pos:end="5:59">( <expr pos:start="5:18" pos:end="5:57"><name pos:start="5:18" pos:end="5:25">listData</name> <operator pos:start="5:27" pos:end="5:28">==</operator> <literal type="null" pos:start="5:30" pos:end="5:33">null</literal> <operator pos:start="5:35" pos:end="5:36">||</operator> <call pos:start="5:38" pos:end="5:52"><name pos:start="5:38" pos:end="5:50"><name pos:start="5:38" pos:end="5:45">listData</name><operator pos:start="5:46" pos:end="5:46">.</operator><name pos:start="5:47" pos:end="5:50">size</name></name><argument_list pos:start="5:51" pos:end="5:52">()</argument_list></call> <operator pos:start="5:54" pos:end="5:55">==</operator> <literal type="number" pos:start="5:57" pos:end="5:57">0</literal></expr> )</condition><block type="pseudo" pos:start="6:17" pos:end="6:23"><block_content pos:start="6:17" pos:end="6:23">
                <return pos:start="6:17" pos:end="6:23">return;</return></block_content></block></if></if_stmt>
            <for pos:start="7:13" pos:end="10:13">for <control pos:start="7:17" pos:end="7:57">( <init pos:start="7:19" pos:end="7:28"><decl pos:start="7:19" pos:end="7:27"><type pos:start="7:19" pos:end="7:21"><name pos:start="7:19" pos:end="7:21">int</name></type> <name pos:start="7:23" pos:end="7:23">i</name> <init pos:start="7:25" pos:end="7:27">= <expr pos:start="7:27" pos:end="7:27"><literal type="number" pos:start="7:27" pos:end="7:27">0</literal></expr></init></decl>;</init>  <condition pos:start="7:31" pos:end="7:50"><expr pos:start="7:31" pos:end="7:49"><name pos:start="7:31" pos:end="7:31">i</name> <operator pos:start="7:33" pos:end="7:33">&lt;</operator> <call pos:start="7:35" pos:end="7:49"><name pos:start="7:35" pos:end="7:47"><name pos:start="7:35" pos:end="7:42">listData</name><operator pos:start="7:43" pos:end="7:43">.</operator><name pos:start="7:44" pos:end="7:47">size</name></name><argument_list pos:start="7:48" pos:end="7:49">()</argument_list></call></expr>;</condition>  <incr pos:start="7:53" pos:end="7:55"><expr pos:start="7:53" pos:end="7:55"><name pos:start="7:53" pos:end="7:53">i</name><operator pos:start="7:54" pos:end="7:55">++</operator></expr></incr> )</control> <block pos:start="7:59" pos:end="10:13">{<block_content pos:start="8:17" pos:end="9:50">
                <decl_stmt pos:start="8:17" pos:end="8:70"><decl pos:start="8:17" pos:end="8:69"><type pos:start="8:17" pos:end="8:26"><name pos:start="8:17" pos:end="8:26">TblAuditor</name></type> <name pos:start="8:28" pos:end="8:34">auditor</name> <init pos:start="8:36" pos:end="8:69">= <expr pos:start="8:38" pos:end="8:69"><operator pos:start="8:38" pos:end="8:38">(</operator> <name pos:start="8:40" pos:end="8:49">TblAuditor</name> <operator pos:start="8:51" pos:end="8:51">)</operator> <call pos:start="8:53" pos:end="8:69"><name pos:start="8:53" pos:end="8:64"><name pos:start="8:53" pos:end="8:60">listData</name><operator pos:start="8:61" pos:end="8:61">.</operator><name pos:start="8:62" pos:end="8:64">get</name></name><argument_list pos:start="8:65" pos:end="8:69">( <argument pos:start="8:67" pos:end="8:67"><expr pos:start="8:67" pos:end="8:67"><name pos:start="8:67" pos:end="8:67">i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="9:17" pos:end="9:50"><expr pos:start="9:17" pos:end="9:49"><call pos:start="9:17" pos:end="9:49"><name pos:start="9:17" pos:end="9:40"><name pos:start="9:17" pos:end="9:23">auditor</name><operator pos:start="9:24" pos:end="9:24">.</operator><name pos:start="9:25" pos:end="9:40">setSchedConflict</name></name><argument_list pos:start="9:41" pos:end="9:49">( <argument pos:start="9:43" pos:end="9:47"><expr pos:start="9:43" pos:end="9:47"><literal type="boolean" pos:start="9:43" pos:end="9:47">false</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block> <catch pos:start="11:11" pos:end="14:9">catch <parameter_list pos:start="11:17" pos:end="11:32">( <parameter pos:start="11:19" pos:end="11:30"><decl pos:start="11:19" pos:end="11:30"><type pos:start="11:19" pos:end="11:30"><name pos:start="11:19" pos:end="11:27">Exception</name></type> <name pos:start="11:29" pos:end="11:30">ex</name></decl></parameter> )</parameter_list> <block pos:start="11:34" pos:end="14:9">{<block_content pos:start="12:13" pos:end="13:58">
            <expr_stmt pos:start="12:13" pos:end="12:31"><expr pos:start="12:13" pos:end="12:30"><call pos:start="12:13" pos:end="12:30"><name pos:start="12:13" pos:end="12:24"><name pos:start="12:13" pos:end="12:18">logger</name><operator pos:start="12:19" pos:end="12:19">.</operator><name pos:start="12:20" pos:end="12:24">error</name></name><argument_list pos:start="12:25" pos:end="12:30">( <argument pos:start="12:27" pos:end="12:28"><expr pos:start="12:27" pos:end="12:28"><name pos:start="12:27" pos:end="12:28">ex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="13:13" pos:end="13:58"><expr pos:start="13:13" pos:end="13:57"><call pos:start="13:13" pos:end="13:57"><name pos:start="13:13" pos:end="13:38"><name pos:start="13:13" pos:end="13:22">FacesUtils</name><operator pos:start="13:23" pos:end="13:23">.</operator><name pos:start="13:24" pos:end="13:38">addErrorMessage</name></name><argument_list pos:start="13:39" pos:end="13:57">( <argument pos:start="13:41" pos:end="13:55"><expr pos:start="13:41" pos:end="13:55"><call pos:start="13:41" pos:end="13:55"><name pos:start="13:41" pos:end="13:53"><name pos:start="13:41" pos:end="13:42">ex</name><operator pos:start="13:43" pos:end="13:43">.</operator><name pos:start="13:44" pos:end="13:53">getMessage</name></name><argument_list pos:start="13:54" pos:end="13:55">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
    </block_content>}</block></function>
    
}</block></class></unit>
