<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/listen_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="53:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:25">SocketServer</name> <block pos:start="1:27" pos:end="53:1">{
    
    <function pos:start="3:5" pos:end="16:5"><type pos:start="3:5" pos:end="3:15"><specifier pos:start="3:5" pos:end="3:10">public</specifier> <name pos:start="3:12" pos:end="3:15">void</name></type> <name pos:start="3:17" pos:end="3:22">listen</name><parameter_list pos:start="3:23" pos:end="3:24">()</parameter_list> <throws pos:start="3:26" pos:end="3:43">throws <argument pos:start="3:33" pos:end="3:43"><expr pos:start="3:33" pos:end="3:43"><name pos:start="3:33" pos:end="3:43">IOException</name></expr></argument></throws> <block pos:start="3:45" pos:end="16:5">{<block_content pos:start="4:9" pos:end="15:9">
        <expr_stmt pos:start="4:9" pos:end="4:87"><expr pos:start="4:9" pos:end="4:86"><call pos:start="4:9" pos:end="4:86"><name pos:start="4:9" pos:end="4:18">logMessage</name><argument_list pos:start="4:19" pos:end="4:86">( <argument pos:start="4:21" pos:end="4:84"><expr pos:start="4:21" pos:end="4:84"><literal type="string" pos:start="4:21" pos:end="4:40">"Server started at "</literal> <operator pos:start="4:42" pos:end="4:42">+</operator> <call pos:start="4:44" pos:end="4:61"><name pos:start="4:44" pos:end="4:59"><name pos:start="4:44" pos:end="4:47">this</name><operator pos:start="4:48" pos:end="4:48">.</operator><name pos:start="4:49" pos:end="4:59">getHostname</name></name><argument_list pos:start="4:60" pos:end="4:61">()</argument_list></call> <operator pos:start="4:63" pos:end="4:63">+</operator> <literal type="string" pos:start="4:65" pos:end="4:67">":"</literal> <operator pos:start="4:69" pos:end="4:69">+</operator> <call pos:start="4:71" pos:end="4:84"><name pos:start="4:71" pos:end="4:82"><name pos:start="4:71" pos:end="4:74">this</name><operator pos:start="4:75" pos:end="4:75">.</operator><name pos:start="4:76" pos:end="4:82">getPort</name></name><argument_list pos:start="4:83" pos:end="4:84">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <while pos:start="5:9" pos:end="15:9">while <condition pos:start="5:15" pos:end="5:22">( <expr pos:start="5:17" pos:end="5:20"><literal type="boolean" pos:start="5:17" pos:end="5:20">true</literal></expr> )</condition> <block pos:start="5:24" pos:end="15:9">{<block_content pos:start="6:13" pos:end="14:27">
            <decl_stmt pos:start="6:13" pos:end="6:50"><decl pos:start="6:13" pos:end="6:49"><type pos:start="6:13" pos:end="6:18"><name pos:start="6:13" pos:end="6:18">Socket</name></type> <name pos:start="6:20" pos:end="6:25">socket</name> <init pos:start="6:27" pos:end="6:49">= <expr pos:start="6:29" pos:end="6:49"><call pos:start="6:29" pos:end="6:49"><name pos:start="6:29" pos:end="6:47"><name pos:start="6:29" pos:end="6:40">serverSocket</name><operator pos:start="6:41" pos:end="6:41">.</operator><name pos:start="6:42" pos:end="6:47">accept</name></name><argument_list pos:start="6:48" pos:end="6:49">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="7:13" pos:end="7:101"><expr pos:start="7:13" pos:end="7:100"><call pos:start="7:13" pos:end="7:100"><name pos:start="7:13" pos:end="7:22">logMessage</name><argument_list pos:start="7:23" pos:end="7:100">( <argument pos:start="7:25" pos:end="7:98"><expr pos:start="7:25" pos:end="7:98"><call pos:start="7:25" pos:end="7:47"><name pos:start="7:25" pos:end="7:45"><name pos:start="7:25" pos:end="7:30">socket</name><operator pos:start="7:31" pos:end="7:31">.</operator><name pos:start="7:32" pos:end="7:45">getInetAddress</name></name><argument_list pos:start="7:46" pos:end="7:47">()</argument_list></call><operator pos:start="7:48" pos:end="7:48">.</operator><call pos:start="7:49" pos:end="7:70"><name pos:start="7:49" pos:end="7:68">getCanonicalHostName</name><argument_list pos:start="7:69" pos:end="7:70">()</argument_list></call> <operator pos:start="7:72" pos:end="7:72">+</operator> <literal type="string" pos:start="7:74" pos:end="7:98">"has made a connection !"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="8:13" pos:end="8:50"><expr pos:start="8:13" pos:end="8:49"><call pos:start="8:13" pos:end="8:49"><name pos:start="8:13" pos:end="8:22">logMessage</name><argument_list pos:start="8:23" pos:end="8:49">( <argument pos:start="8:25" pos:end="8:47"><expr pos:start="8:25" pos:end="8:47"><literal type="string" pos:start="8:25" pos:end="8:47">"Creating new listener"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <decl_stmt pos:start="9:13" pos:end="9:65"><decl pos:start="9:13" pos:end="9:64"><type pos:start="9:13" pos:end="9:24"><name pos:start="9:13" pos:end="9:24">ListenThread</name></type> <name pos:start="9:26" pos:end="9:29">task</name> <init pos:start="9:31" pos:end="9:64">= <expr pos:start="9:33" pos:end="9:64"><operator pos:start="9:33" pos:end="9:35">new</operator> <call pos:start="9:37" pos:end="9:64"><name pos:start="9:37" pos:end="9:48">ListenThread</name><argument_list pos:start="9:49" pos:end="9:64">( <argument pos:start="9:51" pos:end="9:56"><expr pos:start="9:51" pos:end="9:56"><name pos:start="9:51" pos:end="9:56">socket</name></expr></argument>, <argument pos:start="9:59" pos:end="9:62"><expr pos:start="9:59" pos:end="9:62"><name pos:start="9:59" pos:end="9:62">this</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="10:13" pos:end="10:62"><expr pos:start="10:13" pos:end="10:61"><call pos:start="10:13" pos:end="10:61"><name pos:start="10:13" pos:end="10:22">logMessage</name><argument_list pos:start="10:23" pos:end="10:61">( <argument pos:start="10:25" pos:end="10:59"><expr pos:start="10:25" pos:end="10:59"><literal type="string" pos:start="10:25" pos:end="10:59">"Adding new totemcontrolcomhandler"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="11:13" pos:end="11:32"><expr pos:start="11:13" pos:end="11:31"><call pos:start="11:13" pos:end="11:31"><name pos:start="11:13" pos:end="11:23">addHandlers</name><argument_list pos:start="11:24" pos:end="11:31">( <argument pos:start="11:26" pos:end="11:29"><expr pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:29">task</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <decl_stmt pos:start="12:13" pos:end="12:49"><decl pos:start="12:13" pos:end="12:48"><type pos:start="12:13" pos:end="12:18"><name pos:start="12:13" pos:end="12:18">Thread</name></type> <name pos:start="12:20" pos:end="12:27">listener</name> <init pos:start="12:29" pos:end="12:48">= <expr pos:start="12:31" pos:end="12:48"><operator pos:start="12:31" pos:end="12:33">new</operator> <call pos:start="12:35" pos:end="12:48"><name pos:start="12:35" pos:end="12:40">Thread</name><argument_list pos:start="12:41" pos:end="12:48">( <argument pos:start="12:43" pos:end="12:46"><expr pos:start="12:43" pos:end="12:46"><name pos:start="12:43" pos:end="12:46">task</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="13:13" pos:end="13:48"><expr pos:start="13:13" pos:end="13:47"><call pos:start="13:13" pos:end="13:47"><name pos:start="13:13" pos:end="13:22">logMessage</name><argument_list pos:start="13:23" pos:end="13:47">( <argument pos:start="13:25" pos:end="13:45"><expr pos:start="13:25" pos:end="13:45"><literal type="string" pos:start="13:25" pos:end="13:45">"Starting new thread"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="14:13" pos:end="14:27"><expr pos:start="14:13" pos:end="14:26"><call pos:start="14:13" pos:end="14:26"><name pos:start="14:13" pos:end="14:24"><name pos:start="14:13" pos:end="14:20">listener</name><operator pos:start="14:21" pos:end="14:21">.</operator><name pos:start="14:22" pos:end="14:24">run</name></name><argument_list pos:start="14:25" pos:end="14:26">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></function>
    
    <function pos:start="18:5" pos:end="20:5"><type pos:start="18:5" pos:end="18:15"><specifier pos:start="18:5" pos:end="18:10">public</specifier> <name pos:start="18:12" pos:end="18:15">void</name></type> <name pos:start="18:17" pos:end="18:26">logMessage</name><parameter_list pos:start="18:27" pos:end="18:42">(<parameter pos:start="18:28" pos:end="18:41"><decl pos:start="18:28" pos:end="18:41"><type pos:start="18:28" pos:end="18:33"><name pos:start="18:28" pos:end="18:33">String</name></type> <name pos:start="18:35" pos:end="18:41">message</name></decl></parameter>)</parameter_list> <block pos:start="18:44" pos:end="20:5">{<block_content>
        <comment type="line" pos:start="19:9" pos:end="19:25">// implementation</comment>
    </block_content>}</block></function>
    
    <function pos:start="22:5" pos:end="24:5"><type pos:start="22:5" pos:end="22:17"><specifier pos:start="22:5" pos:end="22:10">public</specifier> <name pos:start="22:12" pos:end="22:17">String</name></type> <name pos:start="22:19" pos:end="22:29">getHostname</name><parameter_list pos:start="22:30" pos:end="22:31">()</parameter_list> <block pos:start="22:33" pos:end="24:5">{<block_content>
        <comment type="line" pos:start="23:9" pos:end="23:25">// implementation</comment>
    </block_content>}</block></function>
    
    <function pos:start="26:5" pos:end="28:5"><type pos:start="26:5" pos:end="26:14"><specifier pos:start="26:5" pos:end="26:10">public</specifier> <name pos:start="26:12" pos:end="26:14">int</name></type> <name pos:start="26:16" pos:end="26:22">getPort</name><parameter_list pos:start="26:23" pos:end="26:24">()</parameter_list> <block pos:start="26:26" pos:end="28:5">{<block_content>
        <comment type="line" pos:start="27:9" pos:end="27:25">// implementation</comment>
    </block_content>}</block></function>
    
    <function pos:start="30:5" pos:end="32:5"><type pos:start="30:5" pos:end="30:15"><specifier pos:start="30:5" pos:end="30:10">public</specifier> <name pos:start="30:12" pos:end="30:15">void</name></type> <name pos:start="30:17" pos:end="30:27">addHandlers</name><parameter_list pos:start="30:28" pos:end="30:46">(<parameter pos:start="30:29" pos:end="30:45"><decl pos:start="30:29" pos:end="30:45"><type pos:start="30:29" pos:end="30:40"><name pos:start="30:29" pos:end="30:40">ListenThread</name></type> <name pos:start="30:42" pos:end="30:45">task</name></decl></parameter>)</parameter_list> <block pos:start="30:48" pos:end="32:5">{<block_content>
        <comment type="line" pos:start="31:9" pos:end="31:25">// implementation</comment>
    </block_content>}</block></function>
    
    <class pos:start="34:5" pos:end="52:5">class <name pos:start="34:11" pos:end="34:22">ListenThread</name> <super_list pos:start="34:24" pos:end="34:42"><implements pos:start="34:24" pos:end="34:42">implements <super pos:start="34:35" pos:end="34:42"><name pos:start="34:35" pos:end="34:42">Runnable</name></super></implements></super_list> <block pos:start="34:44" pos:end="52:5">{
        
        <decl_stmt pos:start="36:9" pos:end="36:30"><decl pos:start="36:9" pos:end="36:29"><type pos:start="36:9" pos:end="36:22"><specifier pos:start="36:9" pos:end="36:15">private</specifier> <name pos:start="36:17" pos:end="36:22">Socket</name></type> <name pos:start="36:24" pos:end="36:29">socket</name></decl>;</decl_stmt>
        <decl_stmt pos:start="37:9" pos:end="37:36"><decl pos:start="37:9" pos:end="37:35"><type pos:start="37:9" pos:end="37:28"><specifier pos:start="37:9" pos:end="37:15">private</specifier> <name pos:start="37:17" pos:end="37:28">SocketServer</name></type> <name pos:start="37:30" pos:end="37:35">server</name></decl>;</decl_stmt>
        
        <constructor pos:start="39:9" pos:end="42:9"><name pos:start="39:9" pos:end="39:20">ListenThread</name><parameter_list pos:start="39:21" pos:end="39:56">(<parameter pos:start="39:22" pos:end="39:34"><decl pos:start="39:22" pos:end="39:34"><type pos:start="39:22" pos:end="39:34"><name pos:start="39:22" pos:end="39:27">Socket</name></type> <name pos:start="39:29" pos:end="39:34">socket</name></decl></parameter>, <parameter pos:start="39:37" pos:end="39:55"><decl pos:start="39:37" pos:end="39:55"><type pos:start="39:37" pos:end="39:55"><name pos:start="39:37" pos:end="39:48">SocketServer</name></type> <name pos:start="39:50" pos:end="39:55">server</name></decl></parameter>)</parameter_list> <block pos:start="39:58" pos:end="42:9">{<block_content pos:start="40:13" pos:end="41:33">
            <expr_stmt pos:start="40:13" pos:end="40:33"><expr pos:start="40:13" pos:end="40:32"><name pos:start="40:13" pos:end="40:23"><name pos:start="40:13" pos:end="40:16">this</name><operator pos:start="40:17" pos:end="40:17">.</operator><name pos:start="40:18" pos:end="40:23">socket</name></name> <operator pos:start="40:25" pos:end="40:25">=</operator> <name pos:start="40:27" pos:end="40:32">socket</name></expr>;</expr_stmt>
            <expr_stmt pos:start="41:13" pos:end="41:33"><expr pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:23"><name pos:start="41:13" pos:end="41:16">this</name><operator pos:start="41:17" pos:end="41:17">.</operator><name pos:start="41:18" pos:end="41:23">server</name></name> <operator pos:start="41:25" pos:end="41:25">=</operator> <name pos:start="41:27" pos:end="41:32">server</name></expr>;</expr_stmt>
        </block_content>}</block></constructor>
        
        <function pos:start="44:9" pos:end="51:9"><annotation pos:start="44:9" pos:end="44:17">@<name pos:start="44:10" pos:end="44:17">Override</name></annotation>
        <type pos:start="45:9" pos:end="45:19"><specifier pos:start="45:9" pos:end="45:14">public</specifier> <name pos:start="45:16" pos:end="45:19">void</name></type> <name pos:start="45:21" pos:end="45:23">run</name><parameter_list pos:start="45:24" pos:end="45:25">()</parameter_list> <block pos:start="45:27" pos:end="51:9">{<block_content pos:start="46:13" pos:end="50:13">
            <try pos:start="46:13" pos:end="50:13">try <block pos:start="46:17" pos:end="48:13">{<block_content>
                <comment type="line" pos:start="47:17" pos:end="47:33">// implementation</comment>
            </block_content>}</block> <catch pos:start="48:15" pos:end="50:13">catch <parameter_list pos:start="48:21" pos:end="48:35">(<parameter pos:start="48:22" pos:end="48:34"><decl pos:start="48:22" pos:end="48:34"><type pos:start="48:22" pos:end="48:34"><name pos:start="48:22" pos:end="48:32">IOException</name></type> <name pos:start="48:34" pos:end="48:34">e</name></decl></parameter>)</parameter_list> <block pos:start="48:37" pos:end="50:13">{<block_content>
                <comment type="line" pos:start="49:17" pos:end="49:35">// handle exception</comment>
            </block_content>}</block></catch></try>
        </block_content>}</block></function>
    }</block></class>
}</block></class></unit>
