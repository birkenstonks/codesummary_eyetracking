<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/testGetEmail_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="12:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:22">EmailTest</name> <block pos:start="1:24" pos:end="12:1">{
    <function pos:start="2:5" pos:end="11:5"><type pos:start="2:5" pos:end="2:15"><specifier pos:start="2:5" pos:end="2:10">public</specifier> <name pos:start="2:12" pos:end="2:15">void</name></type> <name pos:start="2:17" pos:end="2:28">testGetEmail</name><parameter_list pos:start="2:29" pos:end="2:30">()</parameter_list> <block pos:start="2:32" pos:end="11:5">{<block_content pos:start="3:9" pos:end="7:42">
        <expr_stmt pos:start="3:9" pos:end="3:41"><expr pos:start="3:9" pos:end="3:40"><call pos:start="3:9" pos:end="3:40"><name pos:start="3:9" pos:end="3:26"><name pos:start="3:9" pos:end="3:14">System</name><operator pos:start="3:15" pos:end="3:15">.</operator><name pos:start="3:16" pos:end="3:18">out</name><operator pos:start="3:19" pos:end="3:19">.</operator><name pos:start="3:20" pos:end="3:26">println</name></name><argument_list pos:start="3:27" pos:end="3:40">( <argument pos:start="3:29" pos:end="3:38"><expr pos:start="3:29" pos:end="3:38"><literal type="string" pos:start="3:29" pos:end="3:38">"getEmail"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <decl_stmt pos:start="5:9" pos:end="5:30"><decl pos:start="5:9" pos:end="5:29"><type pos:start="5:9" pos:end="5:14"><name pos:start="5:9" pos:end="5:14">String</name></type> <name pos:start="5:16" pos:end="5:24">expResult</name> <init pos:start="5:26" pos:end="5:29">= <expr pos:start="5:28" pos:end="5:29"><literal type="string" pos:start="5:28" pos:end="5:29">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="6:9" pos:end="6:44"><decl pos:start="6:9" pos:end="6:43"><type pos:start="6:9" pos:end="6:14"><name pos:start="6:9" pos:end="6:14">String</name></type> <name pos:start="6:16" pos:end="6:21">result</name> <init pos:start="6:23" pos:end="6:43">= <expr pos:start="6:25" pos:end="6:43"><call pos:start="6:25" pos:end="6:43"><name pos:start="6:25" pos:end="6:41"><name pos:start="6:25" pos:end="6:32">instance</name><operator pos:start="6:33" pos:end="6:33">.</operator><name pos:start="6:34" pos:end="6:41">getEmail</name></name><argument_list pos:start="6:42" pos:end="6:43">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="7:9" pos:end="7:42"><expr pos:start="7:9" pos:end="7:41"><call pos:start="7:9" pos:end="7:41"><name pos:start="7:9" pos:end="7:20">assertEquals</name><argument_list pos:start="7:21" pos:end="7:41">( <argument pos:start="7:23" pos:end="7:31"><expr pos:start="7:23" pos:end="7:31"><name pos:start="7:23" pos:end="7:31">expResult</name></expr></argument>, <argument pos:start="7:34" pos:end="7:39"><expr pos:start="7:34" pos:end="7:39"><name pos:start="7:34" pos:end="7:39">result</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="9:9" pos:end="9:83">// TODO review the generated test code and remove the default call to fail.</comment>
        <comment type="line" pos:start="10:9" pos:end="10:52">//  fail( "The test case is a prototype." );</comment>
    </block_content>}</block></function>
}</block></class></unit>
