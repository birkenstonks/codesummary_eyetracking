<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/getApplicableLaw_wrapped.java" pos:tabs="8"><import pos:start="1:1" pos:end="1:26">import <name pos:start="1:8" pos:end="1:25"><name pos:start="1:8" pos:end="1:11">java</name><operator pos:start="1:12" pos:end="1:12">.</operator><name pos:start="1:13" pos:end="1:16">util</name><operator pos:start="1:17" pos:end="1:17">.</operator><name pos:start="1:18" pos:end="1:25">Iterator</name></name>;</import>

<class pos:start="3:1" pos:end="32:1"><specifier pos:start="3:1" pos:end="3:6">public</specifier> class <name pos:start="3:14" pos:end="3:20">MyClass</name> <block pos:start="3:22" pos:end="32:1">{
    <comment type="line" pos:start="4:5" pos:end="4:61">// Assuming influenceLaws is a collection of InfluenceLaw</comment>
    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:12">Iterable</name><argument_list type="generic" pos:start="5:13" pos:end="5:26">&lt;<argument pos:start="5:14" pos:end="5:25"><name pos:start="5:14" pos:end="5:25">InfluenceLaw</name></argument>&gt;</argument_list></name></type> <name pos:start="5:28" pos:end="5:40">influenceLaws</name></decl>;</decl_stmt>

    <function pos:start="7:5" pos:end="18:5"><type pos:start="7:5" pos:end="7:23"><specifier pos:start="7:5" pos:end="7:10">public</specifier> <name pos:start="7:12" pos:end="7:23">InfluenceLaw</name></type> <name pos:start="7:25" pos:end="7:40">getApplicableLaw</name><parameter_list pos:start="7:41" pos:end="7:55">(<parameter pos:start="7:42" pos:end="7:54"><decl pos:start="7:42" pos:end="7:54"><type pos:start="7:42" pos:end="7:50"><name pos:start="7:42" pos:end="7:50">Influence</name></type> <name pos:start="7:52" pos:end="7:54">inf</name></decl></parameter>)</parameter_list> <block pos:start="7:57" pos:end="18:5">{<block_content pos:start="8:9" pos:end="17:20">
        <if_stmt pos:start="8:9" pos:end="10:9"><if pos:start="8:9" pos:end="10:9">if <condition pos:start="8:12" pos:end="8:24">(<expr pos:start="8:13" pos:end="8:23"><name pos:start="8:13" pos:end="8:15">inf</name> <operator pos:start="8:17" pos:end="8:18">==</operator> <literal type="null" pos:start="8:20" pos:end="8:23">null</literal></expr>)</condition> <block pos:start="8:26" pos:end="10:9">{<block_content pos:start="9:13" pos:end="9:49">
            <throw pos:start="9:13" pos:end="9:49">throw <expr pos:start="9:19" pos:end="9:48"><operator pos:start="9:19" pos:end="9:21">new</operator> <call pos:start="9:23" pos:end="9:48"><name pos:start="9:23" pos:end="9:46">IllegalArgumentException</name><argument_list pos:start="9:47" pos:end="9:48">()</argument_list></call></expr>;</throw>
        </block_content>}</block></if></if_stmt>
        <for pos:start="11:9" pos:end="16:9">for <control pos:start="11:13" pos:end="11:72">(<init pos:start="11:14" pos:end="11:54"><decl pos:start="11:14" pos:end="11:53"><type pos:start="11:14" pos:end="11:21"><name pos:start="11:14" pos:end="11:21">Iterator</name></type> <name pos:start="11:23" pos:end="11:26">iter</name> <init pos:start="11:28" pos:end="11:53">= <expr pos:start="11:30" pos:end="11:53"><call pos:start="11:30" pos:end="11:53"><name pos:start="11:30" pos:end="11:51"><name pos:start="11:30" pos:end="11:42">influenceLaws</name><operator pos:start="11:43" pos:end="11:43">.</operator><name pos:start="11:44" pos:end="11:51">iterator</name></name><argument_list pos:start="11:52" pos:end="11:53">()</argument_list></call></expr></init></decl>;</init> <condition pos:start="11:56" pos:end="11:70"><expr pos:start="11:56" pos:end="11:69"><call pos:start="11:56" pos:end="11:69"><name pos:start="11:56" pos:end="11:67"><name pos:start="11:56" pos:end="11:59">iter</name><operator pos:start="11:60" pos:end="11:60">.</operator><name pos:start="11:61" pos:end="11:67">hasNext</name></name><argument_list pos:start="11:68" pos:end="11:69">()</argument_list></call></expr>;</condition> <incr/>)</control> <block pos:start="11:74" pos:end="16:9">{<block_content pos:start="12:13" pos:end="15:13">
            <decl_stmt pos:start="12:13" pos:end="12:61"><decl pos:start="12:13" pos:end="12:60"><type pos:start="12:13" pos:end="12:24"><name pos:start="12:13" pos:end="12:24">InfluenceLaw</name></type> <name pos:start="12:26" pos:end="12:31">infLaw</name> <init pos:start="12:33" pos:end="12:60">= <expr pos:start="12:35" pos:end="12:60"><operator pos:start="12:35" pos:end="12:35">(</operator><name pos:start="12:36" pos:end="12:47">InfluenceLaw</name><operator pos:start="12:48" pos:end="12:48">)</operator> <call pos:start="12:50" pos:end="12:60"><name pos:start="12:50" pos:end="12:58"><name pos:start="12:50" pos:end="12:53">iter</name><operator pos:start="12:54" pos:end="12:54">.</operator><name pos:start="12:55" pos:end="12:58">next</name></name><argument_list pos:start="12:59" pos:end="12:60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="13:13" pos:end="15:13"><if pos:start="13:13" pos:end="15:13">if<condition pos:start="13:15" pos:end="13:42">(<expr pos:start="13:16" pos:end="13:41"><call pos:start="13:16" pos:end="13:41"><name pos:start="13:16" pos:end="13:36"><name pos:start="13:16" pos:end="13:21">infLaw</name><operator pos:start="13:22" pos:end="13:22">.</operator><name pos:start="13:23" pos:end="13:36">isApplicableTo</name></name><argument_list pos:start="13:37" pos:end="13:41">(<argument pos:start="13:38" pos:end="13:40"><expr pos:start="13:38" pos:end="13:40"><name pos:start="13:38" pos:end="13:40">inf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:44" pos:end="15:13">{<block_content pos:start="14:17" pos:end="14:30">
                <return pos:start="14:17" pos:end="14:30">return <expr pos:start="14:24" pos:end="14:29"><name pos:start="14:24" pos:end="14:29">infLaw</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><literal type="null" pos:start="17:16" pos:end="17:19">null</literal></expr>;</return>
    </block_content>}</block></function>
    
    <comment type="line" pos:start="20:5" pos:end="20:86">// Placeholder class definitions, replace these with your actual class definitions</comment>
    <class pos:start="21:5" pos:end="23:5">class <name pos:start="21:11" pos:end="21:19">Influence</name> <block pos:start="21:21" pos:end="23:5">{
        <comment type="line" pos:start="22:9" pos:end="22:56">// Your Influence class implementation goes here</comment>
    }</block></class>

    <class pos:start="25:5" pos:end="31:5">class <name pos:start="25:11" pos:end="25:22">InfluenceLaw</name> <block pos:start="25:24" pos:end="31:5">{
        <comment type="line" pos:start="26:9" pos:end="26:59">// Your InfluenceLaw class implementation goes here</comment>
        <function pos:start="27:9" pos:end="30:9"><type pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:15">boolean</name></type> <name pos:start="27:17" pos:end="27:30">isApplicableTo</name><parameter_list pos:start="27:31" pos:end="27:51">(<parameter pos:start="27:32" pos:end="27:50"><decl pos:start="27:32" pos:end="27:50"><type pos:start="27:32" pos:end="27:40"><name pos:start="27:32" pos:end="27:40">Influence</name></type> <name pos:start="27:42" pos:end="27:50">influence</name></decl></parameter>)</parameter_list> <block pos:start="27:53" pos:end="30:9">{<block_content pos:start="29:13" pos:end="29:25">
            <comment type="line" pos:start="28:13" pos:end="28:59">// Replace this with your actual implementation</comment>
            <return pos:start="29:13" pos:end="29:25">return <expr pos:start="29:20" pos:end="29:24"><literal type="boolean" pos:start="29:20" pos:end="29:24">false</literal></expr>;</return>
        </block_content>}</block></function>
    }</block></class>
}</block></class></unit>
