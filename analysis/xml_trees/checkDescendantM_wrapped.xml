<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/checkDescendantM_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="10:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:26">MemberChecker</name> <block pos:start="1:28" pos:end="10:1">{
    <function pos:start="2:5" pos:end="9:5"><type pos:start="2:5" pos:end="2:18"><specifier pos:start="2:5" pos:end="2:10">public</specifier> <name pos:start="2:12" pos:end="2:18">boolean</name></type> <name pos:start="2:20" pos:end="2:35">checkDescendantM</name><parameter_list pos:start="2:36" pos:end="2:67">(<parameter pos:start="2:37" pos:end="2:50"><decl pos:start="2:37" pos:end="2:50"><type pos:start="2:37" pos:end="2:50"><name pos:start="2:37" pos:end="2:42">Member</name></type> <name pos:start="2:44" pos:end="2:50">aMember</name></decl></parameter>, <parameter pos:start="2:53" pos:end="2:66"><decl pos:start="2:53" pos:end="2:66"><type pos:start="2:53" pos:end="2:66"><name pos:start="2:53" pos:end="2:58">Member</name></type> <name pos:start="2:60" pos:end="2:66">dMember</name></decl></parameter>)</parameter_list> <block pos:start="2:69" pos:end="9:5">{<block_content pos:start="3:9" pos:end="8:51">
        <decl_stmt pos:start="3:9" pos:end="3:83"><decl pos:start="3:9" pos:end="3:82"><type pos:start="3:9" pos:end="3:28"><name pos:start="3:9" pos:end="3:28"><name pos:start="3:9" pos:end="3:16">mondrian</name><operator pos:start="3:17" pos:end="3:17">.</operator><name pos:start="3:18" pos:end="3:21">olap</name><operator pos:start="3:22" pos:end="3:22">.</operator><name pos:start="3:23" pos:end="3:28">Member</name></name></type> <name pos:start="3:30" pos:end="3:38">monMember</name> <init pos:start="3:40" pos:end="3:82">= <expr pos:start="3:42" pos:end="3:82"><operator pos:start="3:42" pos:end="3:42">(</operator><operator pos:start="3:43" pos:end="3:43">(</operator><name pos:start="3:44" pos:end="3:57">MondrianMember</name><operator pos:start="3:58" pos:end="3:58">)</operator> <name pos:start="3:60" pos:end="3:66">aMember</name><operator pos:start="3:67" pos:end="3:67">)</operator><operator pos:start="3:68" pos:end="3:68">.</operator><call pos:start="3:69" pos:end="3:82"><name pos:start="3:69" pos:end="3:80">getMonMember</name><argument_list pos:start="3:81" pos:end="3:82">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="4:9" pos:end="4:81"><decl pos:start="4:9" pos:end="4:80"><type pos:start="4:9" pos:end="4:28"><name pos:start="4:9" pos:end="4:28"><name pos:start="4:9" pos:end="4:16">mondrian</name><operator pos:start="4:17" pos:end="4:17">.</operator><name pos:start="4:18" pos:end="4:21">olap</name><operator pos:start="4:22" pos:end="4:22">.</operator><name pos:start="4:23" pos:end="4:28">Member</name></name></type> <name pos:start="4:30" pos:end="4:36">monDesc</name> <init pos:start="4:38" pos:end="4:80">= <expr pos:start="4:40" pos:end="4:80"><operator pos:start="4:40" pos:end="4:40">(</operator><operator pos:start="4:41" pos:end="4:41">(</operator><name pos:start="4:42" pos:end="4:55">MondrianMember</name><operator pos:start="4:56" pos:end="4:56">)</operator> <name pos:start="4:58" pos:end="4:64">dMember</name><operator pos:start="4:65" pos:end="4:65">)</operator><operator pos:start="4:66" pos:end="4:66">.</operator><call pos:start="4:67" pos:end="4:80"><name pos:start="4:67" pos:end="4:78">getMonMember</name><argument_list pos:start="4:79" pos:end="4:80">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="6:9" pos:end="7:25"><if pos:start="6:9" pos:end="7:25">if <condition pos:start="6:12" pos:end="6:71">(<expr pos:start="6:13" pos:end="6:70"><call pos:start="6:13" pos:end="6:41"><name pos:start="6:13" pos:end="6:39"><name pos:start="6:13" pos:end="6:19">monDesc</name><operator pos:start="6:20" pos:end="6:20">.</operator><name pos:start="6:21" pos:end="6:39">isCalculatedInQuery</name></name><argument_list pos:start="6:40" pos:end="6:41">()</argument_list></call> <operator pos:start="6:43" pos:end="6:44">||</operator> <call pos:start="6:46" pos:end="6:70"><name pos:start="6:46" pos:end="6:59"><name pos:start="6:46" pos:end="6:52">monDesc</name><operator pos:start="6:53" pos:end="6:53">.</operator><name pos:start="6:54" pos:end="6:59">equals</name></name><argument_list pos:start="6:60" pos:end="6:70">(<argument pos:start="6:61" pos:end="6:69"><expr pos:start="6:61" pos:end="6:69"><name pos:start="6:61" pos:end="6:69">monMember</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="7:13" pos:end="7:25"><block_content pos:start="7:13" pos:end="7:25">
            <return pos:start="7:13" pos:end="7:25">return <expr pos:start="7:20" pos:end="7:24"><literal type="boolean" pos:start="7:20" pos:end="7:24">false</literal></expr>;</return></block_content></block></if></if_stmt>
        <return pos:start="8:9" pos:end="8:51">return <expr pos:start="8:16" pos:end="8:50"><call pos:start="8:16" pos:end="8:50"><name pos:start="8:16" pos:end="8:39"><name pos:start="8:16" pos:end="8:22">monDesc</name><operator pos:start="8:23" pos:end="8:23">.</operator><name pos:start="8:24" pos:end="8:39">isChildOrEqualTo</name></name><argument_list pos:start="8:40" pos:end="8:50">(<argument pos:start="8:41" pos:end="8:49"><expr pos:start="8:41" pos:end="8:49"><name pos:start="8:41" pos:end="8:49">monMember</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
