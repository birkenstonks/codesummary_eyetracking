<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/fScore_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="21:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:29">FScoreCalculator</name> <block pos:start="1:31" pos:end="21:1">{
    <function pos:start="2:5" pos:end="10:5"><type pos:start="2:5" pos:end="2:17"><specifier pos:start="2:5" pos:end="2:10">public</specifier> <name pos:start="2:12" pos:end="2:17">double</name></type> <name pos:start="2:19" pos:end="2:24">fScore</name><parameter_list pos:start="2:25" pos:end="2:56">(<parameter pos:start="2:26" pos:end="2:39"><decl pos:start="2:26" pos:end="2:39"><type pos:start="2:26" pos:end="2:39"><name pos:start="2:26" pos:end="2:37">ONDEXConcept</name></type> <name pos:start="2:39" pos:end="2:39">x</name></decl></parameter>, <parameter pos:start="2:42" pos:end="2:55"><decl pos:start="2:42" pos:end="2:55"><type pos:start="2:42" pos:end="2:55"><name pos:start="2:42" pos:end="2:53">ONDEXConcept</name></type> <name pos:start="2:55" pos:end="2:55">y</name></decl></parameter>)</parameter_list> <block pos:start="2:58" pos:end="10:5">{<block_content pos:start="3:9" pos:end="9:21">
        <decl_stmt pos:start="3:9" pos:end="3:37"><decl pos:start="3:9" pos:end="3:36"><type pos:start="3:9" pos:end="3:14"><name pos:start="3:9" pos:end="3:14">double</name></type> <name pos:start="3:16" pos:end="3:21">recall</name> <init pos:start="3:23" pos:end="3:36">= <expr pos:start="3:25" pos:end="3:36"><call pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:30">recall</name><argument_list pos:start="3:31" pos:end="3:36">(<argument pos:start="3:32" pos:end="3:32"><expr pos:start="3:32" pos:end="3:32"><name pos:start="3:32" pos:end="3:32">x</name></expr></argument>, <argument pos:start="3:35" pos:end="3:35"><expr pos:start="3:35" pos:end="3:35"><name pos:start="3:35" pos:end="3:35">y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="4:9" pos:end="4:43"><decl pos:start="4:9" pos:end="4:42"><type pos:start="4:9" pos:end="4:14"><name pos:start="4:9" pos:end="4:14">double</name></type> <name pos:start="4:16" pos:end="4:24">precision</name> <init pos:start="4:26" pos:end="4:42">= <expr pos:start="4:28" pos:end="4:42"><call pos:start="4:28" pos:end="4:42"><name pos:start="4:28" pos:end="4:36">precision</name><argument_list pos:start="4:37" pos:end="4:42">(<argument pos:start="4:38" pos:end="4:38"><expr pos:start="4:38" pos:end="4:38"><name pos:start="4:38" pos:end="4:38">x</name></expr></argument>, <argument pos:start="4:41" pos:end="4:41"><expr pos:start="4:41" pos:end="4:41"><name pos:start="4:41" pos:end="4:41">y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="5:9" pos:end="5:25"><decl pos:start="5:9" pos:end="5:24"><type pos:start="5:9" pos:end="5:14"><name pos:start="5:9" pos:end="5:14">double</name></type> <name pos:start="5:16" pos:end="5:20">score</name> <init pos:start="5:22" pos:end="5:24">= <expr pos:start="5:24" pos:end="5:24"><literal type="number" pos:start="5:24" pos:end="5:24">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="6:9" pos:end="8:9"><if pos:start="6:9" pos:end="8:9">if <condition pos:start="6:12" pos:end="6:36">(<expr pos:start="6:13" pos:end="6:35"><name pos:start="6:13" pos:end="6:18">recall</name> <operator pos:start="6:20" pos:end="6:20">+</operator> <name pos:start="6:22" pos:end="6:30">precision</name> <operator pos:start="6:32" pos:end="6:33">!=</operator> <literal type="number" pos:start="6:35" pos:end="6:35">0</literal></expr>)</condition> <block pos:start="6:38" pos:end="8:9">{<block_content pos:start="7:13" pos:end="7:69">
            <expr_stmt pos:start="7:13" pos:end="7:69"><expr pos:start="7:13" pos:end="7:68"><name pos:start="7:13" pos:end="7:17">score</name> <operator pos:start="7:19" pos:end="7:19">=</operator> <operator pos:start="7:21" pos:end="7:21">(</operator><literal type="number" pos:start="7:22" pos:end="7:23">2d</literal> <operator pos:start="7:25" pos:end="7:25">*</operator> <name pos:start="7:27" pos:end="7:32">recall</name> <operator pos:start="7:34" pos:end="7:34">*</operator> <name pos:start="7:36" pos:end="7:44">precision</name><operator pos:start="7:45" pos:end="7:45">)</operator> <operator pos:start="7:47" pos:end="7:47">/</operator> <operator pos:start="7:49" pos:end="7:49">(</operator><name pos:start="7:50" pos:end="7:55">recall</name> <operator pos:start="7:57" pos:end="7:57">+</operator> <name pos:start="7:59" pos:end="7:67">precision</name><operator pos:start="7:68" pos:end="7:68">)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return pos:start="9:9" pos:end="9:21">return <expr pos:start="9:16" pos:end="9:20"><name pos:start="9:16" pos:end="9:20">score</name></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="12:5" pos:end="15:5"><type pos:start="12:5" pos:end="12:18"><specifier pos:start="12:5" pos:end="12:11">private</specifier> <name pos:start="12:13" pos:end="12:18">double</name></type> <name pos:start="12:20" pos:end="12:25">recall</name><parameter_list pos:start="12:26" pos:end="12:57">(<parameter pos:start="12:27" pos:end="12:40"><decl pos:start="12:27" pos:end="12:40"><type pos:start="12:27" pos:end="12:40"><name pos:start="12:27" pos:end="12:38">ONDEXConcept</name></type> <name pos:start="12:40" pos:end="12:40">x</name></decl></parameter>, <parameter pos:start="12:43" pos:end="12:56"><decl pos:start="12:43" pos:end="12:56"><type pos:start="12:43" pos:end="12:56"><name pos:start="12:43" pos:end="12:54">ONDEXConcept</name></type> <name pos:start="12:56" pos:end="12:56">y</name></decl></parameter>)</parameter_list> <block pos:start="12:59" pos:end="15:5">{<block_content pos:start="14:9" pos:end="14:19">
        <comment type="line" pos:start="13:9" pos:end="13:47">// implementation of recall calculation</comment>
        <return pos:start="14:9" pos:end="14:19">return <expr pos:start="14:16" pos:end="14:18"><literal type="number" pos:start="14:16" pos:end="14:18">0.0</literal></expr>;</return>
    </block_content>}</block></function>

    <function pos:start="17:5" pos:end="20:5"><type pos:start="17:5" pos:end="17:18"><specifier pos:start="17:5" pos:end="17:11">private</specifier> <name pos:start="17:13" pos:end="17:18">double</name></type> <name pos:start="17:20" pos:end="17:28">precision</name><parameter_list pos:start="17:29" pos:end="17:60">(<parameter pos:start="17:30" pos:end="17:43"><decl pos:start="17:30" pos:end="17:43"><type pos:start="17:30" pos:end="17:43"><name pos:start="17:30" pos:end="17:41">ONDEXConcept</name></type> <name pos:start="17:43" pos:end="17:43">x</name></decl></parameter>, <parameter pos:start="17:46" pos:end="17:59"><decl pos:start="17:46" pos:end="17:59"><type pos:start="17:46" pos:end="17:59"><name pos:start="17:46" pos:end="17:57">ONDEXConcept</name></type> <name pos:start="17:59" pos:end="17:59">y</name></decl></parameter>)</parameter_list> <block pos:start="17:62" pos:end="20:5">{<block_content pos:start="19:9" pos:end="19:19">
        <comment type="line" pos:start="18:9" pos:end="18:50">// implementation of precision calculation</comment>
        <return pos:start="19:9" pos:end="19:19">return <expr pos:start="19:16" pos:end="19:18"><literal type="number" pos:start="19:16" pos:end="19:18">0.0</literal></expr>;</return>
    </block_content>}</block></function>
}</block></class></unit>
