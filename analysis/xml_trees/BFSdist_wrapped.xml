<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/BFSdist_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="19:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:25">BFSDistClass</name> <block pos:start="1:27" pos:end="19:1">{
    <function pos:start="2:5" pos:end="18:5"><type pos:start="2:5" pos:end="2:15"><specifier pos:start="2:5" pos:end="2:10">public</specifier> <name pos:start="2:12" pos:end="2:15">void</name></type> <name pos:start="2:17" pos:end="2:23">BFSdist</name><parameter_list pos:start="2:24" pos:end="2:61">(<parameter pos:start="2:25" pos:end="2:30"><decl pos:start="2:25" pos:end="2:30"><type pos:start="2:25" pos:end="2:30"><name pos:start="2:25" pos:end="2:28">Node</name></type> <name pos:start="2:30" pos:end="2:30">n</name></decl></parameter>, <parameter pos:start="2:33" pos:end="2:43"><decl pos:start="2:33" pos:end="2:43"><type pos:start="2:33" pos:end="2:43"><name pos:start="2:33" pos:end="2:38">Vector</name></type> <name pos:start="2:40" pos:end="2:43">ToDo</name></decl></parameter>, <parameter pos:start="2:46" pos:end="2:60"><decl pos:start="2:46" pos:end="2:60"><type pos:start="2:46" pos:end="2:60"><name pos:start="2:46" pos:end="2:50"><name pos:start="2:46" pos:end="2:48">int</name><index pos:start="2:49" pos:end="2:50">[]</index></name></type> <name pos:start="2:52" pos:end="2:60">indirConn</name></decl></parameter>)</parameter_list> <block pos:start="2:63" pos:end="18:5">{<block_content pos:start="3:9" pos:end="17:9">
        <decl_stmt pos:start="3:9" pos:end="3:23"><decl pos:start="3:9" pos:end="3:22"><type pos:start="3:9" pos:end="3:12"><name pos:start="3:9" pos:end="3:12">Node</name></type> <name pos:start="3:14" pos:end="3:15">n2</name> <init pos:start="3:17" pos:end="3:22">= <expr pos:start="3:19" pos:end="3:22"><literal type="null" pos:start="3:19" pos:end="3:22">null</literal></expr></init></decl>;</decl_stmt>
        <for pos:start="4:9" pos:end="13:9">for <control pos:start="4:13" pos:end="4:75">(<init pos:start="4:14" pos:end="4:52"><decl pos:start="4:14" pos:end="4:51"><type pos:start="4:14" pos:end="4:24"><name pos:start="4:14" pos:end="4:24">Enumeration</name></type> <name pos:start="4:26" pos:end="4:27">es</name> <init pos:start="4:29" pos:end="4:51">= <expr pos:start="4:31" pos:end="4:51"><call pos:start="4:31" pos:end="4:51"><name pos:start="4:31" pos:end="4:49"><name pos:start="4:31" pos:end="4:31">n</name><operator pos:start="4:32" pos:end="4:32">.</operator><name pos:start="4:33" pos:end="4:40">adjEdges</name><operator pos:start="4:41" pos:end="4:41">.</operator><name pos:start="4:42" pos:end="4:49">elements</name></name><argument_list pos:start="4:50" pos:end="4:51">()</argument_list></call></expr></init></decl>;</init> <condition pos:start="4:54" pos:end="4:74"><expr pos:start="4:54" pos:end="4:73"><call pos:start="4:54" pos:end="4:73"><name pos:start="4:54" pos:end="4:71"><name pos:start="4:54" pos:end="4:55">es</name><operator pos:start="4:56" pos:end="4:56">.</operator><name pos:start="4:57" pos:end="4:71">hasMoreElements</name></name><argument_list pos:start="4:72" pos:end="4:73">()</argument_list></call></expr>;</condition><incr/>)</control> <block pos:start="4:77" pos:end="13:9">{<block_content pos:start="5:13" pos:end="12:13">
            <expr_stmt pos:start="5:13" pos:end="5:52"><expr pos:start="5:13" pos:end="5:51"><name pos:start="5:13" pos:end="5:14">n2</name> <operator pos:start="5:16" pos:end="5:16">=</operator> <call pos:start="5:18" pos:end="5:51"><name pos:start="5:18" pos:end="5:26"><name pos:start="5:18" pos:end="5:18">n</name><operator pos:start="5:19" pos:end="5:19">.</operator><name pos:start="5:20" pos:end="5:26">adjNode</name></name><argument_list pos:start="5:27" pos:end="5:51">(<argument pos:start="5:28" pos:end="5:50"><expr pos:start="5:28" pos:end="5:50"><operator pos:start="5:28" pos:end="5:28">(</operator><name pos:start="5:29" pos:end="5:32">Edge</name><operator pos:start="5:33" pos:end="5:33">)</operator> <call pos:start="5:35" pos:end="5:50"><name pos:start="5:35" pos:end="5:48"><name pos:start="5:35" pos:end="5:36">es</name><operator pos:start="5:37" pos:end="5:37">.</operator><name pos:start="5:38" pos:end="5:48">nextElement</name></name><argument_list pos:start="5:49" pos:end="5:50">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="6:13" pos:end="12:13"><if pos:start="6:13" pos:end="12:13">if <condition pos:start="6:16" pos:end="6:28">(<expr pos:start="6:17" pos:end="6:27"><name pos:start="6:17" pos:end="6:27"><name pos:start="6:17" pos:end="6:18">n2</name><operator pos:start="6:19" pos:end="6:19">.</operator><name pos:start="6:20" pos:end="6:23">dist</name></name> <operator pos:start="6:25" pos:end="6:25">&lt;</operator> <literal type="number" pos:start="6:27" pos:end="6:27">0</literal></expr>)</condition> <block pos:start="6:30" pos:end="12:13">{<block_content pos:start="7:17" pos:end="11:29">
                <expr_stmt pos:start="7:17" pos:end="7:37"><expr pos:start="7:17" pos:end="7:36"><name pos:start="7:17" pos:end="7:23"><name pos:start="7:17" pos:end="7:18">n2</name><operator pos:start="7:19" pos:end="7:19">.</operator><name pos:start="7:20" pos:end="7:23">dist</name></name> <operator pos:start="7:25" pos:end="7:25">=</operator> <name pos:start="7:27" pos:end="7:32"><name pos:start="7:27" pos:end="7:27">n</name><operator pos:start="7:28" pos:end="7:28">.</operator><name pos:start="7:29" pos:end="7:32">dist</name></name> <operator pos:start="7:34" pos:end="7:34">+</operator> <literal type="number" pos:start="7:36" pos:end="7:36">1</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="8:17" pos:end="8:37"><expr pos:start="8:17" pos:end="8:36"><name pos:start="8:17" pos:end="8:34"><name pos:start="8:17" pos:end="8:25">indirConn</name><index pos:start="8:26" pos:end="8:34">[<expr pos:start="8:27" pos:end="8:33"><name pos:start="8:27" pos:end="8:33"><name pos:start="8:27" pos:end="8:28">n2</name><operator pos:start="8:29" pos:end="8:29">.</operator><name pos:start="8:30" pos:end="8:33">dist</name></name></expr>]</index></name><operator pos:start="8:35" pos:end="8:36">++</operator></expr>;</expr_stmt>
     
                <comment type="line" pos:start="10:17" pos:end="10:60">// important add adds to the end of the list</comment>
                <expr_stmt pos:start="11:17" pos:end="11:29"><expr pos:start="11:17" pos:end="11:28"><call pos:start="11:17" pos:end="11:28"><name pos:start="11:17" pos:end="11:24"><name pos:start="11:17" pos:end="11:20">ToDo</name><operator pos:start="11:21" pos:end="11:21">.</operator><name pos:start="11:22" pos:end="11:24">add</name></name><argument_list pos:start="11:25" pos:end="11:28">(<argument pos:start="11:26" pos:end="11:27"><expr pos:start="11:26" pos:end="11:27"><name pos:start="11:26" pos:end="11:27">n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt pos:start="14:9" pos:end="17:9"><if pos:start="14:9" pos:end="17:9">if <condition pos:start="14:12" pos:end="14:28">(<expr pos:start="14:13" pos:end="14:27"><operator pos:start="14:13" pos:end="14:13">!</operator><call pos:start="14:14" pos:end="14:27"><name pos:start="14:14" pos:end="14:25"><name pos:start="14:14" pos:end="14:17">ToDo</name><operator pos:start="14:18" pos:end="14:18">.</operator><name pos:start="14:19" pos:end="14:25">isEmpty</name></name><argument_list pos:start="14:26" pos:end="14:27">()</argument_list></call></expr>)</condition> <block pos:start="14:30" pos:end="17:9">{<block_content pos:start="15:13" pos:end="16:41">
            <expr_stmt pos:start="15:13" pos:end="15:39"><expr pos:start="15:13" pos:end="15:38"><name pos:start="15:13" pos:end="15:14">n2</name> <operator pos:start="15:16" pos:end="15:16">=</operator> <operator pos:start="15:18" pos:end="15:18">(</operator><name pos:start="15:19" pos:end="15:22">Node</name><operator pos:start="15:23" pos:end="15:23">)</operator> <call pos:start="15:25" pos:end="15:38"><name pos:start="15:25" pos:end="15:35"><name pos:start="15:25" pos:end="15:28">ToDo</name><operator pos:start="15:29" pos:end="15:29">.</operator><name pos:start="15:30" pos:end="15:35">remove</name></name><argument_list pos:start="15:36" pos:end="15:38">(<argument pos:start="15:37" pos:end="15:37"><expr pos:start="15:37" pos:end="15:37"><literal type="number" pos:start="15:37" pos:end="15:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="16:13" pos:end="16:41"><expr pos:start="16:13" pos:end="16:40"><call pos:start="16:13" pos:end="16:40"><name pos:start="16:13" pos:end="16:19">BFSdist</name><argument_list pos:start="16:20" pos:end="16:40">(<argument pos:start="16:21" pos:end="16:22"><expr pos:start="16:21" pos:end="16:22"><name pos:start="16:21" pos:end="16:22">n2</name></expr></argument>, <argument pos:start="16:25" pos:end="16:28"><expr pos:start="16:25" pos:end="16:28"><name pos:start="16:25" pos:end="16:28">ToDo</name></expr></argument>, <argument pos:start="16:31" pos:end="16:39"><expr pos:start="16:31" pos:end="16:39"><name pos:start="16:31" pos:end="16:39">indirConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></function>
}</block></class></unit>
