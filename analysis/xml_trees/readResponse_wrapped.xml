<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="Java" filename="wrapped_functions/readResponse_wrapped.java" pos:tabs="8"><class pos:start="1:1" pos:end="26:1"><specifier pos:start="1:1" pos:end="1:6">public</specifier> class <name pos:start="1:14" pos:end="1:27">ResponseReader</name> <block pos:start="1:29" pos:end="26:1">{
   
    <function pos:start="3:5" pos:end="24:5"><type pos:start="3:5" pos:end="3:18"><specifier pos:start="3:5" pos:end="3:11">private</specifier> <name pos:start="3:13" pos:end="3:18">String</name></type> <name pos:start="3:20" pos:end="3:31">readResponse</name><parameter_list pos:start="3:32" pos:end="3:53">( <parameter pos:start="3:34" pos:end="3:51"><decl pos:start="3:34" pos:end="3:51"><type pos:start="3:34" pos:end="3:44"><name pos:start="3:34" pos:end="3:44">InputStream</name></type> <name pos:start="3:46" pos:end="3:51">stream</name></decl></parameter> )</parameter_list> <block pos:start="3:55" pos:end="24:5">{<block_content pos:start="4:9" pos:end="23:29">
        <decl_stmt pos:start="4:9" pos:end="4:84"><decl pos:start="4:9" pos:end="4:83"><type pos:start="4:9" pos:end="4:22"><name pos:start="4:9" pos:end="4:22">BufferedReader</name></type> <name pos:start="4:24" pos:end="4:28">input</name> <init pos:start="4:30" pos:end="4:83">= <expr pos:start="4:32" pos:end="4:83"><operator pos:start="4:32" pos:end="4:34">new</operator> <call pos:start="4:36" pos:end="4:83"><name pos:start="4:36" pos:end="4:49">BufferedReader</name><argument_list pos:start="4:50" pos:end="4:83">( <argument pos:start="4:52" pos:end="4:82"><expr pos:start="4:52" pos:end="4:82"><operator pos:start="4:52" pos:end="4:54">new</operator> <call pos:start="4:56" pos:end="4:82"><name pos:start="4:56" pos:end="4:72">InputStreamReader</name><argument_list pos:start="4:73" pos:end="4:82">( <argument pos:start="4:75" pos:end="4:80"><expr pos:start="4:75" pos:end="4:80"><name pos:start="4:75" pos:end="4:80">stream</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="5:9" pos:end="5:45"><decl pos:start="5:9" pos:end="5:44"><type pos:start="5:9" pos:end="5:20"><name pos:start="5:9" pos:end="5:20">StringBuffer</name></type> <name pos:start="5:22" pos:end="5:23">sb</name> <init pos:start="5:25" pos:end="5:44">= <expr pos:start="5:27" pos:end="5:44"><operator pos:start="5:27" pos:end="5:29">new</operator> <call pos:start="5:31" pos:end="5:44"><name pos:start="5:31" pos:end="5:42">StringBuffer</name><argument_list pos:start="5:43" pos:end="5:44">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="6:9" pos:end="6:20"><decl pos:start="6:9" pos:end="6:19"><type pos:start="6:9" pos:end="6:14"><name pos:start="6:9" pos:end="6:14">String</name></type> <name pos:start="6:16" pos:end="6:19">line</name></decl>;</decl_stmt>
        <try pos:start="7:9" pos:end="11:9">try <block pos:start="7:13" pos:end="9:9">{<block_content pos:start="8:13" pos:end="8:36">
            <expr_stmt pos:start="8:13" pos:end="8:36"><expr pos:start="8:13" pos:end="8:35"><name pos:start="8:13" pos:end="8:16">line</name> <operator pos:start="8:18" pos:end="8:18">=</operator> <call pos:start="8:20" pos:end="8:35"><name pos:start="8:20" pos:end="8:33"><name pos:start="8:20" pos:end="8:24">input</name><operator pos:start="8:25" pos:end="8:25">.</operator><name pos:start="8:26" pos:end="8:33">readLine</name></name><argument_list pos:start="8:34" pos:end="8:35">()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block> <catch pos:start="9:11" pos:end="11:9">catch <parameter_list pos:start="9:17" pos:end="9:33">( <parameter pos:start="9:19" pos:end="9:31"><decl pos:start="9:19" pos:end="9:31"><type pos:start="9:19" pos:end="9:31"><name pos:start="9:19" pos:end="9:29">IOException</name></type> <name pos:start="9:31" pos:end="9:31">e</name></decl></parameter> )</parameter_list> <block pos:start="9:35" pos:end="11:9">{<block_content pos:start="10:13" pos:end="10:24">
            <expr_stmt pos:start="10:13" pos:end="10:24"><expr pos:start="10:13" pos:end="10:23"><name pos:start="10:13" pos:end="10:16">line</name> <operator pos:start="10:18" pos:end="10:18">=</operator> <literal type="null" pos:start="10:20" pos:end="10:23">null</literal></expr>;</expr_stmt>
        </block_content>}</block></catch></try>
        <while pos:start="12:9" pos:end="22:9">while <condition pos:start="12:15" pos:end="12:30">( <expr pos:start="12:17" pos:end="12:28"><name pos:start="12:17" pos:end="12:20">line</name> <operator pos:start="12:22" pos:end="12:23">!=</operator> <literal type="null" pos:start="12:25" pos:end="12:28">null</literal></expr> )</condition> <block pos:start="12:32" pos:end="22:9">{<block_content pos:start="13:13" pos:end="21:13">
            <if_stmt pos:start="13:13" pos:end="16:13"><if pos:start="13:13" pos:end="16:13">if <condition pos:start="13:16" pos:end="13:44">( <expr pos:start="13:18" pos:end="13:42"><operator pos:start="13:18" pos:end="13:18">!</operator><call pos:start="13:19" pos:end="13:29"><name pos:start="13:19" pos:end="13:27"><name pos:start="13:19" pos:end="13:22">line</name><operator pos:start="13:23" pos:end="13:23">.</operator><name pos:start="13:24" pos:end="13:27">trim</name></name><argument_list pos:start="13:28" pos:end="13:29">()</argument_list></call><operator pos:start="13:30" pos:end="13:30">.</operator><call pos:start="13:31" pos:end="13:42"><name pos:start="13:31" pos:end="13:36">equals</name><argument_list pos:start="13:37" pos:end="13:42">( <argument pos:start="13:39" pos:end="13:40"><expr pos:start="13:39" pos:end="13:40"><literal type="string" pos:start="13:39" pos:end="13:40">""</literal></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="13:46" pos:end="16:13">{<block_content pos:start="14:17" pos:end="15:34">
                <if_stmt pos:start="14:17" pos:end="14:57"><if pos:start="14:17" pos:end="14:57">if <condition pos:start="14:20" pos:end="14:38">( <expr pos:start="14:22" pos:end="14:36"><call pos:start="14:22" pos:end="14:32"><name pos:start="14:22" pos:end="14:30"><name pos:start="14:22" pos:end="14:23">sb</name><operator pos:start="14:24" pos:end="14:24">.</operator><name pos:start="14:25" pos:end="14:30">length</name></name><argument_list pos:start="14:31" pos:end="14:32">()</argument_list></call> <operator pos:start="14:34" pos:end="14:34">&gt;</operator> <literal type="number" pos:start="14:36" pos:end="14:36">0</literal></expr> )</condition><block type="pseudo" pos:start="14:40" pos:end="14:57"><block_content pos:start="14:40" pos:end="14:57"> <expr_stmt pos:start="14:40" pos:end="14:57"><expr pos:start="14:40" pos:end="14:56"><call pos:start="14:40" pos:end="14:56"><name pos:start="14:40" pos:end="14:48"><name pos:start="14:40" pos:end="14:41">sb</name><operator pos:start="14:42" pos:end="14:42">.</operator><name pos:start="14:43" pos:end="14:48">append</name></name><argument_list pos:start="14:49" pos:end="14:56">( <argument pos:start="14:51" pos:end="14:54"><expr pos:start="14:51" pos:end="14:54"><literal type="string" pos:start="14:51" pos:end="14:54">"|n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt pos:start="15:17" pos:end="15:34"><expr pos:start="15:17" pos:end="15:33"><call pos:start="15:17" pos:end="15:33"><name pos:start="15:17" pos:end="15:25"><name pos:start="15:17" pos:end="15:18">sb</name><operator pos:start="15:19" pos:end="15:19">.</operator><name pos:start="15:20" pos:end="15:25">append</name></name><argument_list pos:start="15:26" pos:end="15:33">( <argument pos:start="15:28" pos:end="15:31"><expr pos:start="15:28" pos:end="15:31"><name pos:start="15:28" pos:end="15:31">line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <try pos:start="17:13" pos:end="21:13">try <block pos:start="17:17" pos:end="19:13">{<block_content pos:start="18:17" pos:end="18:40">
                <expr_stmt pos:start="18:17" pos:end="18:40"><expr pos:start="18:17" pos:end="18:39"><name pos:start="18:17" pos:end="18:20">line</name> <operator pos:start="18:22" pos:end="18:22">=</operator> <call pos:start="18:24" pos:end="18:39"><name pos:start="18:24" pos:end="18:37"><name pos:start="18:24" pos:end="18:28">input</name><operator pos:start="18:29" pos:end="18:29">.</operator><name pos:start="18:30" pos:end="18:37">readLine</name></name><argument_list pos:start="18:38" pos:end="18:39">()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block> <catch pos:start="19:15" pos:end="21:13">catch <parameter_list pos:start="19:21" pos:end="19:37">( <parameter pos:start="19:23" pos:end="19:35"><decl pos:start="19:23" pos:end="19:35"><type pos:start="19:23" pos:end="19:35"><name pos:start="19:23" pos:end="19:33">IOException</name></type> <name pos:start="19:35" pos:end="19:35">e</name></decl></parameter> )</parameter_list> <block pos:start="19:39" pos:end="21:13">{<block_content pos:start="20:17" pos:end="20:28">
                <expr_stmt pos:start="20:17" pos:end="20:28"><expr pos:start="20:17" pos:end="20:27"><name pos:start="20:17" pos:end="20:20">line</name> <operator pos:start="20:22" pos:end="20:22">=</operator> <literal type="null" pos:start="20:24" pos:end="20:27">null</literal></expr>;</expr_stmt>
            </block_content>}</block></catch></try>
        </block_content>}</block></while>
        <return pos:start="23:9" pos:end="23:29">return <expr pos:start="23:16" pos:end="23:28"><call pos:start="23:16" pos:end="23:28"><name pos:start="23:16" pos:end="23:26"><name pos:start="23:16" pos:end="23:17">sb</name><operator pos:start="23:18" pos:end="23:18">.</operator><name pos:start="23:19" pos:end="23:26">toString</name></name><argument_list pos:start="23:27" pos:end="23:28">()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
    
}</block></class></unit>
